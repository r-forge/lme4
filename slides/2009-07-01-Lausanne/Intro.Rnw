\usepackage{SweaveSlides}
\title[lme4]{Mixed models in R using the lme4 package\\Part 1: Introduction to R}
\subject{Lattice}
\date[July 1, 2009]{University of Lausanne\\July 1, 2009}
\AtBeginSection[]
{
  \begin{frame}<beamer>
    \frametitle{Outline}
    \tableofcontents[currentsection]
  \end{frame}
}
\begin{document}
\frame{\titlepage}
\begin{frame}
  \frametitle{Outline}
  \tableofcontents[pausesections,hideallsubsections]
\end{frame}
\SweaveOpts{engine=R,eps=FALSE,pdf=TRUE,width=10,height=6.5,strip.white=all}
\SweaveOpts{prefix=TRUE,prefix.string=figs/Intro,include=TRUE}
\setkeys{Gin}{width=\textwidth}
<<preliminaries,echo=FALSE,results=hide>>=
options(width=69,show.signif.stars=FALSE)
@ 

\section{What is R?}

\begin{frame}
  \frametitle{R}
  \begin{itemize}
  \item \R is an Open Source (and freely available) environment for
    statistical computing and graphics.
  \item The \Emph{CRAN} links given previously provide binary downloads for
    Windows, for Mac OS X and for several flavors of Linux.  Source
    code is also available.
  \item \R is under active development - typically two major releases per
    year.
  \item \R provides data manipulation and display facilities and most
    statistical procedures.  It can be extended with ``packages''
    containing data, code and documentation.  Currently there are more
    than 1800 contributed packages in the Comprehensive R Archive
    Network (CRAN).
  \end{itemize}
\end{frame}  

\begin{frame}[fragile]
  \frametitle{Simple calculator usage}
  \begin{itemize}
  \item The R application is started by clicking on an icon or a menu
    item.  The main window is called the console window.
  \item Arithmetic expressions can be typed in the console window.  If
    the expresssion on a line is complete it is evaluated and the
    result is printed.
  \end{itemize}
<<simple>>=  
5 - 1 + 10
7 * 10 / 2
exp(-2.19)
pi
sin(2 * pi/3)
@ 
\end{frame}

\begin{frame}
  \frametitle{Comments on the calculator usage}
  \begin{itemize}
  \item The \code{>} symbol at the beginning of the input line is the
    prompt from the application, not something that is typed by the user.
  \item If the expression typed is incomplete, say because it contains
    a \code{(} without the corresponding \code{)} then the prompt
    changes to a \code{+} indicating that more input is required.
  \item The expression \code{[1]} at the beginning of the response is
    an index indicating that what follows is the first (and in these
    cases the only) element of a numeric vector.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Assignment of values to names}
  \begin{itemize}
  \item During a session, data objects can be assigned to names.
  \item The assignment operator is the two-character sequence
    \code{<-}.  (The \code{=} sign can also be used, except in a few
    cases.)
  \item The function \code{ls} lists the names of objects; \code{rm}
    removes objects.  An alternative to \code{ls} is \code{ls.str()}
    which lists objects in the workspace and provides a brief
    description of their structure.
  \end{itemize}
<<ls>>=
x <- 5
ls()
ls.str()
rm(x)
ls()
@ 
\end{frame}

\begin{frame}[fragile]
  \frametitle{Vectors}
  \begin{itemize}
  \item Numeric objects are always stored as vectors (as opposed to scalars).
  \item An easy way to create a non-trivial vector is a sequence,
    generated by the \code{:} operator or the \code{seq} function.
  \item When results are printed the number in square brackets at the
    beginning of the line is the index of the element at the start of
    the line.
  \item Square brackets are used to specify indices (or, in general, subsets).
  \end{itemize}
<<subscripts>>=
(x <- 0:19)
x[5]
str(y <- x + runif(20, min = 10, max = 20))
@ 
\end{frame}

\begin{frame}
  \frametitle{Following the operations on the slides}
  \begin{itemize}
  \item The lines of \R code shown on these slides are available in
    files on the course web site.  The file for this section is called
    \code{Intro.R}.
  \item If you open this file in the \R application (the
    \code{File}$\rightarrow$\code{Open} menu item or \code{<ctrl>-O})
    and position the cursor at a particular line, then \code{<ctrl>-R}
    will send the line to the console window for execution and step to
    the next line.
  \item Any part of a line following a \code{\#} symbol is a comment.
  \item The code is divided into named ``chunks'', typically one chunk
    per slide that contains code.
  \item In the system called \code{Sweave} used to generate the slides
    the result of a call to a graphics function must be
    \code{print}ed.  In interactive use this is not necessary but
    neither is it harmful.
  \end{itemize}
\end{frame}

\section[Data]{Organizing data}

\begin{frame}
  \frametitle{Organizing data in R}
  \begin{itemize}
  \item Standard rectangular data sets (columns are variables,
    rows are observations) are stored in \R{} as \Emph{data
      frames}.
  \item The columns can be \Emph{numeric} variables (e.g. measurements
    or counts) or \Emph{factor} variables (categorical data) or
    \Emph{ordered} factor variables.  These types are called the
    \Emph{class} of the variable.
  \item The \code{str} function provides a concise description of the
    structure of a data set (or any other class of object in R).  The
    \code{summary} function summarizes each variable according to its
    class.  Both are highly recommended for routine use.
  \item Entering just the name of the data frame causes it to be
    printed.  For large data frames use the \code{head} and \code{tail}
    functions to view the first few or last few rows.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Data input}
  \begin{itemize}
  \item The simplest way to input a rectangular data set is to save it
    as a comma-separated value (csv) file and read it with
    \code{read.csv}.
  \item The first argument to \code{read.csv} is the name of the file.
    On Windows it can be tricky to get the file path correct
    (backslashes need to be doubled).  The best approach is to use the
    function \code{file.choose} which brings up a ``chooser'' panel
    through which you can select a particular file.  The idiom to remember is
<<readcsv,eval=FALSE>>=
mydata <- read.csv(file.choose())
@ 
    for comma-separated value files or
<<readcsv,eval=FALSE>>=
mydata <- read.delim(file.choose())
@ 
    for files with tab-delimited data fields.
  \item If you are connected to the Internet you can use a URL (within
    quotes) as the first argument to \code{read.csv} or
    \code{read.delim}. (See question 1 in the first set of exercises)
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{In-built data sets}
  \begin{itemize}
  \item One of the packages attached by default to an \R session is
    the \code{datasets} package that contains several data sets culled
    primarily from introductory statistics texts.
  \item We will use some of these data sets for illustration.
  \item The \code{Formaldehyde} data are from a calibration
    experiment, \code{Insectsprays} are from an experiment on the
    effectiveness of insecticides.
  \item Use \code{?} followed by the name of a function or data set to
    view its documentation.  If the documentation contains an example
    section, you can execute it with the \code{example} function.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{The Formaldehyde data}
<<Formaldehyde>>=
str(Formaldehyde)
summary(Formaldehyde)
Formaldehyde
@   
\end{frame}

\begin{frame}[fragile]
  \frametitle{The InsectSprays data}
<<InsectSprays>>=
str(InsectSprays)
summary(InsectSprays)
head(InsectSprays)
@   
\end{frame}

\begin{frame}[fragile]
  \frametitle{Copying, saving and restoring data objects}
  \begin{itemize}
  \item Assigning a data object to a new name creates a copy.
  \item You can save a data object to a file, typically with the
    extension \code{.rda}, using the \code{save} function.
  \item To restore the object you \code{load} the file.
  \end{itemize}
<<saverestore>>=
sprays <- InsectSprays
save(sprays, file = "sprays.rda")
rm(sprays)
ls.str()
load("sprays.rda")
names(sprays)
@   
\end{frame}

\section[Variables]{Accessing and modifying variables}

\begin{frame}[fragile]
  \frametitle{Accessing and modifying variables}
  \begin{itemize}
  \item The \code{\$} operator is used to access variables within a data frame.
<<dollarop>>=
Formaldehyde$carb
@     
\item You can also use \code{\$} to assign to a variable name
<<dollaropleft>>=
sprays$sqrtcount <- sqrt(sprays$count)
names(sprays)
@     
\item Assigning the special value \code{NULL} to the name of a
  variable removes it.
<<dollaropleftNULL>>=
sprays$sqrtcount <- NULL
names(sprays)
@     
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Using with and within}
  \begin{itemize}
  \item In complex expressions it can become tedious to repeatedly
    type the name of the data frame.
  \item The \code{with} function allows for direct access to variable
    names within an expression.  It provides ``read-only'' access.
<<formalfoo>>=
Formaldehyde$carb * Formaldehyde$optden
with(Formaldehyde, carb * optden)
@ 
\item The \code{within} function provides read-write access to a data
  frame.  It does not change the original frame; it returns a modified
  copy.  To change the stored object you must assign the result
  to the name.
<<within>>=
sprays <- within(sprays, sqrtcount <- sqrt(count))
str(sprays)
@ 
  \end{itemize}
\end{frame}

\begin{frame}\frametitle{Data Organization}
  \begin{itemize}
  \item Careful consideration of the data layout for experimental or
    observational data is repaid in later ease of analysis.  Sadly, the
    widespread use of spreadsheets does not encourage such careful
    consideration.
  \item If you are organizing data in a table, use consistent data
    types within columns.  Databases require this; spreadsheets don't.
  \item A common practice in some disciplines is to convert
    categorical data to 0/1 ``indicator variables'' or to code the levels
    as numbers with a separate ``data key''.  This practice is
    unnecessary and error-inducing in \R.  When you see categorical
    variables coded as numeric variables, change them to factors or
    ordered factors.
  \item Spreadsheets also encourage the use of a ``wide'' data format,
    especially for longitudinal data.  Each row corresponds to an
    experimental unit and multiple observation occasions are
    represented in different columns.  The ``long'' format is
    preferred in \R.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Converting numeric variables to factors}
  \begin{itemize}
  \item The \code{factor} (\code{ordered}) function creates a factor
    (ordered factor) from a vector.  Factor labels can be specified in
    the optional \code{labels} argument.
  \item Suppose the \code{spray} variable in the \code{InsectSprays}
    data was stored as numeric values $1, 2,\dots,6$.  We convert it
    back to a factor with \code{factor}.
  \end{itemize}
<<sprays>>=
str(sprays <- within(InsectSprays, spray <- as.integer(spray)))
str(sprays <- within(sprays, spray <- factor(spray, labels = LETTERS[1:6])))
@ 
\end{frame}

\section[Subsets]{Subsets of data frames}

\begin{frame}[fragile]
  \frametitle{Subsets of data frames}
  \begin{itemize}
  \item The \code{subset} function is used to extract a subset of the
    rows or of the columns or of both from a data frame.
  \item The first argument is the name of the data frame. The
    second is an expression indicating which rows are to be selected.
  \item This expression often uses logical operators such as
    \code{==}, the equality comparison, or \code{!=}, the inequality
    comparison, \code{>=}, meaning ``greater than or equal to'', etc.
<<sprayA>>=
str(sprayA <- subset(sprays, spray == "A"))
@   
\item The optional argument \code{select} can be used to specify the
  variables to be included.  There is an example of its use in
  question 4 of the first set of exercises.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Subsets and factors}
  \begin{itemize}
  \item The way that factors are defined, a subset of a factor retains
    the original set of levels.  Usually this is harmless but
    sometimes it can cause unexpected results.
  \item You can ``drop unused levels'' by applying \code{factor} to
    the factor.  Many functions, such as \code{xtabs}, which is used to
    create cross-tabulations, have optional arguments with names like
    \code{drop.unused.levels} to automate this.
  \end{itemize}
<<xtabssprays>>=
xtabs( ~ spray, sprayA)
xtabs( ~ spray, sprayA, drop = TRUE)
@ 
\end{frame}

\begin{frame}[fragile]
  \frametitle{Dropping unused levels in the spray factor and \%in\%}
<<sprayAdrop>>=
str(sprayA <- within(sprayA, spray <- factor(spray)))
xtabs( ~ spray, sprayA)
@   
\begin{itemize}
\item Another useful comparison operator is \code{\%in\%} for
  selecting a subset of the values in a variable.
\end{itemize}
<<sprayDEF>>=
str(sprayDEF <- subset(sprays, spray %in% c("D","E","F")))
@ 
\end{frame}

\begin{frame}[fragile]
  \frametitle{``Long'' and ``wide'' forms of data}
  \begin{itemize}
  \item Spreadsheet users tend to store balanced data, such as
    \code{InsectSprays}, across many columns.  This is called the
    ``wide'' format.  The \code{unstack} function converts a simple
    ``long'' data set to wide; \code{stack} for the other way.
<<unstack>>=
str(unstack(InsectSprays))
@     
\item The problem with the wide format is that it only works for
  balanced data.  A designed experiment may produce balanced data
  (although ``Murphy's Law'' would indicate otherwise) but
  observational data are rarely balanced.
\item Stay with the long format (all the observations on all the units
  are in a single column) when possible.
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Using reshape}
  \begin{itemize}
  \item The \code{reshape} function allows for more general
    translations of long to wide and vice-versa.  It is specifically
    intended for longitudinal data.
  \item There is also a package called \code{"reshape"} with even more
    general (but potentially confusing) capabilities.
  \item Phil Spector's book, \Emph{Data Manipulation
      with R} (Springer, 2008) covers this topic in more detail.
  \end{itemize}
\end{frame}

<<classprep,echo=FALSE,results=hide>>=
if (file.exists("classroom.rda")) {
    load("classroom.rda")
} else {
    classroom <- within(read.csv("http://www-personal.umich.edu/~bwest/classroom.csv"),
                        schoolid <- factor(schoolid))
}
@ 
\begin{frame}[fragile]
  \frametitle{Determining unique rows in a data frame}
  \begin{itemize}
  \item One disadvantage of keeping data in the wide format is
    redundancy and the possibility of inconsistency.
  \item In the first set of exercises you are asked to create a data
    frame \code{classroom} from a csv file available on the Internet.
    Each of the \Sexpr{nrow(classroom)} rows corresponds to a student
    in a classroom in a school.  There is one numeric ``school level''
    covariate, \code{housepov}.
  \item To check if \code{housepov} is stored consistently we select
    the unique combinations of only those two columns
  \end{itemize}
<<clasuniq>>=
str(unique(subset(classroom, select = c(schoolid,housepov))))
@ 
\end{frame}

\section{Missing Data}


\begin{frame}[fragile]\frametitle{Working with NA's}
  \begin{itemize}
  \item Missing data are represented in \R as \code{NA}.
  \item The important thing to know about \code{NA}s is that they
    propagate.  Except for certain detector functions (\code{is.na},
    \code{is.finite}) any operation on an \code{NA} returns an
    \code{NA}.
  \end{itemize}
<<na>>=
(x <- c(10, 20, NA, 4, NA, 2))
sum(x)
is.na(x)
sum(x[!is.na(x)])
@   
\end{frame}

\begin{frame}[fragile]\frametitle{The na.rm argument in summary functions}
  \begin{itemize}
  \item Many summary functions have an optional argument \code{na.rm}.
    When \code{TRUE} the function is applied to the non-missing data
    only.
  \item The \code{na.rm} argument does remove \code{NaN}s but does not
    remove \code{Inf}s or \code{-Inf}s.
  \end{itemize}
<<na.rm>>=
sum(x, na.rm = TRUE)
(x <- c(0, 1, NA, 0/0, Inf))
sum(x, na.rm = TRUE)
@   
\end{frame}

\begin{frame}
  \frametitle{Saving workspaces}
  \begin{itemize}
  \item When you exit an R session (the function call \code{q()},
    including the parentheses, or the menu option or \code{<ctrl>-Q})
    you are given the option of saving the workspace.
  \item If you do save it, the workspace will be restored when you
    start \R again in that directory.
  \item Different people have different approaches to saving
    workspaces.  I never do it.  I always save the data objects that I
    may need later and/or the code that generates them.  Frequently on
    a large project I just have one copy of the data set and many,
    many scripts to manipulate it.
  \item For me the problem with saving and restoring workspaces is that
    I'm not starting from a known and reproducible state in a new
    session.
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Summary of data input and manipulation}
  \begin{itemize}
  \item Rectangular data sets are stored in data frames.  Typically
    columns are numeric vectors or factors but other types (Dates,
    date/times) are possible.
  \item The easiest input functions are \code{read.csv} and \code{read.delim}.
  \item Use \code{str} and \code{summary} frequently.
  \item Use \code{subset} for extracting parts of a data frame,
    \code{with} for read-only access to variables and \code{within}
    for read-write access.
  \item Store categorical variables as factors.
  \end{itemize}
\end{frame}
