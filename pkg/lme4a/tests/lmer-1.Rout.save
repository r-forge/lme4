
R version 2.11.0 Patched (2010-05-16 r52015)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(lme4a)
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det, norm

Loading required package: minqa
> options(show.signif.stars = FALSE)
> 
> source(system.file("test-tools.R", package = "Matrix"))# identical3() etc
> 
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm1a <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, REML = FALSE))
Linear mixed model fit by maximum likelihood  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
     AIC      BIC   logLik deviance 
    1764     1783     -876     1752 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 565.52   23.781         
          Days         32.68    5.717   0.081 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.632   37.91
Days          10.467      1.502    6.97

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> fm1. <- glmer(Reaction ~ Days + (Days|Subject), sleepstudy)
> ## default family=gaussian -> automatically calls  lmer()
> stopifnot(all.equal(fm1, fm1.))
> ## Test 'compDev = FALSE' (vs TRUE)
> fm1. <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy,
+               compDev = FALSE)#--> use R code (not C) for deviance computation
Warning message:
In determinant(x, TRUE) : This version of the Matrix package returns
|determinant(L)| instead of determinant(A), i.e., a
*DIFFERENT* value.
 If still necessary, do change your code, following http://matrix.r-forge.r-project.org

> 
> L1 <- as.list(env(   fm1. @ env))
> L2 <- as.list(env(as(fm1, "lmerenv")))
> ns <- intersect((n1 <- names(L1)),
+                 (n2 <- names(L2)))
> n1[!(n1 %in% ns)] #    lmer1() extras
[1] "p"     "frame"
> n2[!(n2 %in% ns)] # new-lmer() extras
[1] "cbeta"     "cu"        "wrss"      "wtres"     "row.names" "names"    
> ns <- ns[!(ns %in% c("call", "compDev"))]# they will certainly differ by that ...
> all.equal(L1[ns], L2[ns], tol = 7e-7) ## ok, still far from ok
[1] "Component 1: Modes: numeric, logical"                                                        
[2] "Component 1: target is numeric, current is logical"                                          
[3] "Component 2: Numeric: lengths (0, 180) differ"                                               
[4] "Component 3: Numeric: lengths (0, 180) differ"                                               
[5] "Component 11: Attributes: < Component 3: Component 1: target is NULL, current is character >"
[6] "Component 16: Attributes: < Length mismatch: comparison on first 1 components >"             
[7] "Component 31: Numeric: lengths (0, 180) differ"                                              
[8] "Component 32: Numeric: lengths (0, 180) differ"                                              
> ## FIXME !
> 
> stopifnot(all.equal(fixef(fm1), fixef(fm2), tol= 1e-13),
+ 	  all.equal(unname(fixef(fm1)),
+ 		    c(251.405104848485, 10.467285959595), tol = 1e-13),
+ 	  all.equal(cov2cor(vcov(fm1))["(Intercept)", "Days"],
+ 		    -0.13755, tol=1e-4))
> 
> (fm3 <- lmer(Yield ~ 1|Batch, Dyestuff2))
dev(th =0) = 161.828277812 <= 161.828277843 = opt$obj(th=5.57587e-05) --> th := 0
Linear mixed model fit by REML  ['lmerDe']
Formula: Yield ~ 1 | Batch 
   Data: Dyestuff2 
 REML 
161.8 

Random effects:
 Groups   Name        Variance Std.Dev.
 Batch    (Intercept)  0.00    0.000   
 Residual             13.81    3.716   
Number of obs: 30, groups: Batch, 6

Fixed effects:
            Estimate Std. Error t value
(Intercept)   5.6656     0.6784   8.352
> stopifnot(all.equal(coef(summary(fm3)),
+ 		    array(c(5.6656, 0.67838803150, 8.3515624346),
+ 			  c(1,3), dimnames = list("(Intercept)",
+ 				  c("Estimate", "Std. Error", "t value")))))
> 
> ### {from ../man/lmer.Rd } --- compare lmer1 & lmer2 ---------------
> (fm1. <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmer']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2. <- lmer1(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmer']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> (fm1 <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2 <- lmer2(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> fm1.1s <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
Warning message:
In model.spmatrix(t, data, transpose = transpose) :
  no factors in formula; explicitly coercing to "sparseMatrix"
> fm1.2s <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
Warning message:
In model.spmatrix(t, data, transpose = transpose) :
  no factors in formula; explicitly coercing to "sparseMatrix"
> for(nm in c("coef", "fixef", "ranef", "sigma",
+ 	     "model.matrix", "model.frame" , "terms")) {
+     cat(sprintf("%15s : ", nm))
+     FUN <- get(nm)
+     F.fm1.1s <- FUN(fm1.1s)
+     F.fm1.2s <- FUN(fm1.2s)
+     if(nm == "model.matrix") {
+         F.fm1.1s <- as(F.fm1.1s, "denseMatrix")
+         F.fm1.2s <- as(F.fm1.2s, "denseMatrix")
+     }
+     stopifnot(all.equal(FUN(fm1.), F.fm1.1s, tol = 1e-6))
+     stopifnot(all.equal(FUN(fm1 ), F.fm1.1s, tol = 9e-6))
+     stopifnot(all.equal(F.fm1.2s,  F.fm1.1s, tol = 6e-6))
+     cat("[Ok]\n")
+ }
           coef : [Ok]
          fixef : [Ok]
          ranef : [Ok]
          sigma : [Ok]
   model.matrix : [Ok]
    model.frame : [Ok]
          terms : [Ok]
> 
> 
> ## transformed vars should work[even if non-sensical as here;failed in 0.995-1]
> fm2l <- lmer(log(Reaction) ~ log(Days+1) + (log(Days+1)|Subject),
+              data = sleepstudy, REML = FALSE)
> ## no need for an expand method now : xfm2 <- expand(fm2)
> 
> stopifnot(dim(ranef(fm2l)[[1]]) == c(18, 2),
+           is((c3 <- coef(fm3)), "coef.mer"),
+           all(fixef(fm3) == c3$Batch),## <-- IFF  \hat{\sigma^2} == 0
+           TRUE)
> 
> ## generalized linear mixed model
> m1e <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+              family = binomial, data = cbpp, doFit = FALSE)
> stopifnot(is(m1e,"merenv"))
> ## now
> str(nlminb(m1e, control = list(trace = 1)))
  0:     103.64097:  1.00000 -1.26902 -1.17076 -1.30141 -1.78228
  1:     103.64095:  1.00000 -1.26902 -1.17076 -1.30140 -1.78228
  2:     100.56004: 0.615233 -1.27251 -0.959292 -1.12479 -1.65541
  3:     100.20954: 0.610582 -1.40036 -0.926470 -1.07457 -1.58632
  4:     100.17421: 0.610882 -1.39431 -0.957225 -1.08640 -1.53232
  5:     100.14351: 0.629166 -1.39711 -0.944652 -1.12369 -1.52905
  6:     100.11065: 0.650213 -1.39784 -0.969052 -1.10605 -1.55253
  7:     100.11004: 0.651153 -1.40287 -0.968823 -1.10431 -1.54988
  8:     100.11004: 0.651242 -1.40329 -0.968724 -1.10422 -1.54973
  9:     100.11004: 0.651244 -1.40329 -0.968724 -1.10422 -1.54973
 10:     100.11004: 0.651247 -1.40329 -0.968723 -1.10423 -1.54973
List of 6
 $ par        : num [1:5] 0.651 -1.403 -0.969 -1.104 -1.55
 $ objective  : num 100
 $ convergence: int 0
 $ message    : chr "relative convergence (4)"
 $ iterations : int 10
 $ evaluations: Named int [1:2] 41 100
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
> m1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+             family = binomial, data = cbpp, verbose = 1)
  0:     103.64097:  1.00000 -1.26902 -1.17076 -1.30141 -1.78228
  1:     103.64095:  1.00000 -1.26902 -1.17076 -1.30140 -1.78228
  2:     100.56004: 0.615233 -1.27251 -0.959292 -1.12479 -1.65541
  3:     100.20954: 0.610582 -1.40036 -0.926470 -1.07457 -1.58632
  4:     100.17421: 0.610882 -1.39431 -0.957225 -1.08640 -1.53232
  5:     100.14351: 0.629166 -1.39711 -0.944652 -1.12369 -1.52905
  6:     100.11065: 0.650213 -1.39784 -0.969052 -1.10605 -1.55253
  7:     100.11004: 0.651153 -1.40287 -0.968823 -1.10431 -1.54988
  8:     100.11004: 0.651242 -1.40329 -0.968724 -1.10422 -1.54973
  9:     100.11004: 0.651244 -1.40329 -0.968724 -1.10422 -1.54973
 10:     100.11004: 0.651247 -1.40329 -0.968723 -1.10423 -1.54973
> stopifnot(is((cm1 <- coef(m1e)), "coef.mer"),
+ 	  dim(cm1$herd) == c(15,4),
+           TRUE ## FIXME -- these were "old-lme4" -- not lme4a (rel.diff. = 0.0166)
+ 	  ## all.equal(fixef(m1),
+ 	  ##           c(-1.39853504914, -0.992334711,
+ 	  ##             -1.12867541477, -1.58037390498), check.attr=FALSE)
+ 	  )
> 
> ## Simple example by Andrew Gelman (2006-01-10) ----
> n.groups <- 10 ; n.reps <- 2
> n <- length(group.id <- gl(n.groups, n.reps))
> ## simulate the varying parameters and the data:
> set.seed(0)
> a.group <- rnorm(n.groups, 1, 2)
> y <- rnorm (n, a.group[group.id], 1)
> ## fit and summarize the model
> fit.1 <- lmer (y ~ 1 + (1 | group.id))
> coef (fit.1)# failed in Matrix 0.99-6
$group.id
   (Intercept)
1    3.3760020
2   -0.2384554
3    3.1859581
4    3.1121398
5    1.4381126
6   -1.7593553
7   -0.2546167
8    0.6977972
9    1.2121808
10   4.9433582

attr(,"class")
[1] "coef.mer"
> (sf1 <- summary(fit.1)) # show() is as without summary()
$methTitle
[1] "Linear mixed model fit by REML "

$devcomp
$devcomp$cmp
    ldL2    ldRX2    pwrss deviance     REML 
26.84532  0.31120 12.68741 74.50042 73.40344 

$devcomp$dims
    n     p   nmp     q useSc 
   20     1    19    10     1 


$isLmer
[1] TRUE

$useScale
[1] TRUE

$logLik
'log Lik.' -36.70172 (df=3)

$family
NULL

$ngrps
group.id 
      10 

$coefficients
            Estimate Std. Error  t value
(Intercept) 1.571312  0.6994125 2.246617

$sigma
[1] 0.8171648

$vcov
NULL

$varcor
$varcor$group.id
            (Intercept)
(Intercept)      4.5579
attr(,"stddev")
(Intercept) 
   2.134924 
attr(,"correlation")
            (Intercept)
(Intercept)           1

attr(,"sc")
[1] 0.8171648

$AICtab
    REML 
73.40344 

$call
lmer(formula = y ~ 1 + (1 | group.id))

attr(,"class")
[1] "summary.merenv"
> stopifnot(all.equal(fixef(fit.1), c("(Intercept)" = 1.571312129)),
+ 	  all.equal(ranef(fit.1)[["group.id"]][,"(Intercept)"],
+ 		   c(1.80469, -1.80977, 1.61465, 1.54083, -0.1332,
+ 		     -3.33067, -1.82593, -0.873515, -0.359131, 3.37204),
+ 		    tol = 1e-4)
+ 	  )
> 
> 
> ## ranef and coef
> rr <- ranef(fm1)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm1), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> rr <- ranef(fm2)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm2), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> 
> if (require('MASS', quietly = TRUE)) {
+     bacteria$wk2 <- bacteria$week > 2
+     contrasts(bacteria$trt) <-
+         structure(contr.sdif(3),
+                   dimnames = list(NULL, c("diag", "encourage")))
+     print(fm5 <- glmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+     ## momentarily "fails": nlminb() stuck at theta=1
+ 
+     if(FALSE) ## numbers from 'lme4' ("old"):
+     stopifnot(all.equal(logLik(fm5),
+                         structure(c(ML = -96.13069), nobs = c(n = 220), nall = c(n = 220),
+                                   df = c(p = 5), REML = FALSE, class = "logLik")),
+               all.equal(fixef(fm5),
+ 			c("(Intercept)"= 2.831609490, "trtdiag"= -1.366722631,
+ 			  "trtencourage"=0.5840147802, "wk2TRUE"=-1.598591346)))
+ }
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerenv']
 Family: binomial 
Formula: y ~ trt + wk2 + (1 | ID) 
   Data: bacteria 
     AIC      BIC   logLik deviance 
  204.05   221.02   -97.02   194.05 

Random effects:
 Groups Name        Variance Std.Dev.
 ID     (Intercept) 1        1       
Number of obs: 220, groups: ID, 50

Fixed effects:
             Estimate Std. Error z value
(Intercept)    2.2479     0.3804   5.909
trtdiag       -1.1187     0.5645  -1.982
trtencourage   0.4815     0.5863   0.821
wk2TRUE       -1.2949     0.4095  -3.162

Correlation of Fixed Effects:
            (Intr) trtdig trtncr
trtdiag     -0.029              
trtencourag  0.058 -0.500       
wk2TRUE     -0.787  0.059 -0.047
> 
> ## Invalid factor specification -- used to seg.fault:
> set.seed(1)
> dat <- within(data.frame(lagoon = factor(rep(1:4,each = 25)),
+                          habitat = factor(rep(1:20, each = 5))),
+           {
+               y <- round(10*rnorm(100, m = 10*as.numeric(lagoon)))
+           })
> 
> try(reg <- lmer(y ~ habitat + (1|habitat*lagoon), data = dat) # did seg.fault
+     ) # now gives error                 ^- should be ":"
Error in FUN(X[[1L]], ...) : 
  Invalid grouping factor specification, habitat * lagoon
In addition: Warning message:
In Ops.factor(habitat, lagoon) : * not meaningful for factors
> r1  <- lmer(y ~ 0+habitat + (1|habitat:lagoon), data = dat) # ok, but senseless
> r1b <- lmer(y ~ 0+habitat + (1|habitat), data = dat) # same model, clearly indeterminable
> ## "TODO" :  summary(r1)  should ideally warn the user
> stopifnot(all.equal(fixef(r1), fixef(r1b), tol= 1e-15),
+           all.equal(ranef(r1), ranef(r1b), tol= 1e-15, check.attributes=FALSE))
> 
> ## Use a more sensible model:
> r2.0 <- lmer(y ~ 0+lagoon + (1|habitat:lagoon), data = dat) # ok
dev(th =0) = 709.744716061 <= 709.744716126 = opt$obj(th=5.77071e-05) --> th := 0
> r2   <- lmer(y ~ 0+lagoon + (1|habitat), data = dat) # ok, and more clear
dev(th =0) = 709.744716061 <= 709.744716126 = opt$obj(th=5.77071e-05) --> th := 0
> stopifnot(all.equal(fixef(r2), fixef(r2.0), tol= 1e-15),
+           all.equal(ranef(r2), ranef(r2.0), tol= 1e-15, check.attributes=FALSE))
> V2 <- vcov(r2)
> assert.EQ.mat(V2, diag(x = 9.9833/3, nr = 4))
> stopifnot(all.equal(unname(fixef(r2)) - (1:4)*100,
+ 		    c(1.72, 0.28, 1.76, 0.8), tol = 1e-13))
> 
> ## sparseX version should give same numbers:
> r2.  <- lmer(y ~ 0+lagoon + (1|habitat), data = dat,
+              sparseX = TRUE, verbose = TRUE)
  1 :            0 |->   709.744716061
  2 :      3.81966 |->   765.830864037
  3 :      6.18034 |->   780.980198803
  4 :      2.36068 |->   751.070350186
  5 :     1.458980 |->   737.248853157
  6 :    0.9016994 |->   725.448039603
  7 :    0.5572809 |->   717.069662988
  8 :    0.3444185 |->   712.574396219
  9 :    0.2128624 |->   710.747037848
 10 :    0.1315562 |->   710.102527414
 11 :   0.03073312 |->   709.763118247
 12 :    0.0139253 |->   709.748481995
 13 :  0.001806356 |->   709.744779377
 14 :  0.001847046 |->   709.744782262
 15 :  0.001765665 |->   709.744776556
 16 :  0.001091241 |->   709.744739168
 17 : 0.0006744242 |->   709.744724887
 18 : 0.0004168171 |->   709.744719432
 19 : 0.0002576071 |->   709.744717349
 20 : 0.0001592100 |->   709.744716553
 21 : 9.839716e-05 |->   709.744716249
 22 : 5.770706e-05 |->   709.744716126
 23 : 5.770706e-05 |->   709.744716126
dev(th =0) = 709.744716061 <= 709.744716126 = opt$obj(th=5.77071e-05) --> th := 0
 24 :            0 |->   709.744716061
> 
> ## the summary() components we do want to compare 'dense X' vs 'sparse X':
> nmsSumm <- c("methTitle", "devcomp", "logLik", "ngrps", "coefficients",
+              "sigma", "REmat", "AICtab")
> sr2  <- summary(r2)
> sr2. <- summary(r2.)
> 
> stopifnot(all.equal(sr2[nmsSumm], sr2.[nmsSumm], tol= 1e-14),
+           all.equal(ranef(r2), ranef(r2.), tol= 1e-14),
+           Matrix:::isDiagonal(vcov(r2.)),# ok
+           all.equal(diag(vcov(r2.)), rep.int(V2[1,1], 4), tol= 1e-13)
+           ,
+ 	  all(vcov(r2.)@factors$correlation == diag(4)),
+           TRUE)
Note: Method with signature "dpoMatrix#generalMatrix" chosen for function "coerce",
 target signature "corMatrix#generalMatrix".
 "denseMatrix#generalMatrix" would also be valid
Note: Method with signature "dpoMatrix#dgeMatrix" chosen for function "coerce",
 target signature "corMatrix#dgeMatrix".
 "ddenseMatrix#dgeMatrix" would also be valid
> r2.
Linear mixed model fit by REML  ['lmerSp']
Formula: y ~ 0 + lagoon + (1 | habitat) 
   Data: dat 
 REML 
709.7 

Random effects:
 Groups   Name        Variance Std.Dev.
 habitat  (Intercept)  0.0     0.000   
 Residual             83.2     9.121   
Number of obs: 100, groups: habitat, 20

Fixed effects:
        Estimate Std. Error t value
lagoon1  101.720      1.824   55.76
lagoon2  200.280      1.824  109.79
lagoon3  301.760      1.824  165.42
lagoon4  400.800      1.824  219.71

Correlation of Fixed Effects:
        lagon1 lagon2 lagon3
lagoon2 0.000               
lagoon3 0.000  0.000        
lagoon4 0.000  0.000  0.000 
> 
> ## Failure to specify a random effects term - used to give an obscure message
> ## Ensure *NON*-translated message; works on Linux,... :
> Sys.setlocale("LC_MESSAGES", "C")
[1] "C"
> tc <- tryCatch(
+ 	       m2 <- glmer(incidence / size ~ period, weights = size,
+ 			   family = binomial, data = cbpp)
+ 	       , error = function(.) .)
> stopifnot(inherits(tc, "error"),
+ 	  identical(tc$message,
+ 		    "No random effects terms specified in formula"))
> 
> ### mcmcsamp() :
> ## From: Andrew Gelman <gelman@stat.columbia.edu>
> ## Date: Wed, 18 Jan 2006 22:00:53 -0500
> 
> if (FALSE) {  # mcmcsamp still needs work
+     has.coda <- require(coda)
+     if(!has.coda)
+         cat("'coda' package not available; some outputs will look suboptimal\n")
+ 
+     ## Very simple example
+     y <- 1:10
+     group <- gl(2,5)
+     (M1 <- lmer (y ~ 1 + (1 | group))) # works fine
+     (r1 <- mcmcsamp (M1))              # dito
+     r2 <- mcmcsamp (M1, saveb = TRUE)  # gave error in 0.99-* and 0.995-[12]
+     (r10 <- mcmcsamp (M1, n = 10, saveb = TRUE))
+ 
+     ## another one, still simple
+     y <- (1:20)*pi
+     x <- (1:20)^2
+     group <- gl(2,10)
+     M1 <- lmer (y ~ 1 | group)
+     mcmcsamp (M1, n = 2, saveb=TRUE) # fine
+ 
+     M2 <- lmer (y ~ 1 + x + (1 + x | group)) # false convergence
+     ## should be identical (and is)
+     M2 <- lmer (y ~ x + ( x | group))#  false convergence -> simulation doesn't work:
+     if(FALSE) ## try(..) fails here (in R CMD check) [[why ??]]
+         mcmcsamp (M2, saveb=TRUE)
+     ## Error: inconsistent degrees of freedom and dimension ...
+ 
+     ## mcmc for glmer:
+     rG1k <- mcmcsamp(m1, n = 1000)
+     summary(rG1k)
+     rG2 <- mcmcsamp(m1, n = 3, verbose = TRUE)
+ }
> 
> ## Spencer Graves' example (from a post to S-news, 2006-08-03) ----------------
> ## it should give an error, rather than silent non-sense:
> tstDF <- data.frame(group = letters[1:5], y = 1:5)
> assertError(## Now throws an error, as desired :
+             lmer(y ~ 1 + (1|group), data = tstDF)
+             )
> 
> 
> ## Wrong formula gave a seg.fault at times:
> D <-  data.frame(y= rnorm(20,10), ff = gl(4,5),
+                  x1=rnorm(20,3), x2=rnorm(20,7))
> m0 <- lmer(y ~ (x1 + x2)|ff, data = D)
> m1 <- lmer(y ~ x1 + x2|ff  , data = D)
> m2 <- lmer(y ~ x1 + (x2|ff), data = D)
> m3 <- lmer(y ~ (x2|ff) + x1, data = D)
> stopifnot(identical(ranef(m0), ranef(m1)),
+           identical(ranef(m2), ranef(m3)),
+           inherits(tryCatch(lmer(y ~ x2|ff + x1, data = D), error = function(e)e),
+                    "error"))
Warning message:
In Ops.factor(ff, x1) : + not meaningful for factors
> 
> ## Reordering of grouping factors should not change the internal structure
> Pm1  <- lmer1(strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> Pm2  <- lmer1(strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> P2.1 <- lmer (strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> P2.2 <- lmer (strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> ## The environments of Pm1 and Pm2 should be identical except for
> ## "call" and "frame":
> all.EQ <- function(u,v, ...) all.equal.X(u, v, except = c("call", "frame"), ...)
> S4_2list <- function(obj) {
+     sn <- slotNames(obj)
+     structure(lapply(sn, slot, object = obj), .Names = sn)
+ }
> 
> stopifnot(all.EQ(env(Pm1), env(Pm2)),
+           all.EQ(S4_2list(P2.1),
+                  S4_2list(P2.2)))
> 
> 
> cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
Time elapsed:  26.028 0.218 26.773 0 0 
> 
