
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### suppressPackageStartupMessages(...)  as we have an *.Rout.save to Rdiff against
> stopifnot(suppressPackageStartupMessages(require(lme4a)))
> options(show.signif.stars = FALSE)
> 
> source(system.file("test-tools.R", package = "Matrix"))# identical3() etc
> all.EQ <- function(u,v, ...) all.equal.X(u, v, except = c("call", "frame"), ...)
> S4_2list <- function(obj) {
+     sn <- slotNames(obj)
+     structure(lapply(sn, slot, object = obj), .Names = sn)
+ }
> showProc.time <- function() { ## CPU elapsed __since last called__
+     .ot <- .pc
+     .pc <<- proc.time()
+     cat('Time elapsed: ', (.pc - .ot)[1:3],'\n')
+ }
> .pc <- proc.time()
> 
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm1a <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, REML = FALSE))
Linear mixed model fit by maximum likelihood  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
     AIC      BIC   logLik deviance 
    1764     1783     -876     1752 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 565.52   23.781         
          Days         32.68    5.717   0.081 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.632   37.91
Days          10.467      1.502    6.97

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> ## Now works for glmer2 (aka glmer)
> fm1. <- glmer(Reaction ~ Days + (Days|Subject), sleepstudy)
> ## default family=gaussian -> automatically calls  lmer()
> stopifnot(all.equal(fm1, fm1.))
> ## Test against previous version in lmer1 (using bobyqa for consistency)
> (fm1. <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy, opt = "bobyqa"))
Linear mixed model fit by REML  ['lmer']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> stopifnot(all.equal(deviance(fm1), deviance(fm1.)),
+           all.equal(fixef(fm1), fixef(fm1.)),
+           all.equal(fm1@re@theta, fm1.@theta, tol = 1.e-7),
+           all.equal(ranef(fm1), ranef(fm1.)))
> 
> ## Test 'compDev = FALSE' (vs TRUE)
> fm1. <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy, opt = "bobyqa",
+               compDev = FALSE)#--> use R code (not C) for deviance computation
Warning message:
In determinant(x, TRUE) : This version of the Matrix package returns
|determinant(L)| instead of determinant(A), i.e., a
*DIFFERENT* value.
 If still necessary, do change your code, following http://matrix.r-forge.r-project.org

> stopifnot(all.equal(deviance(fm1), deviance(fm1.)),
+           all.equal(fixef(fm1), fixef(fm1.)),
+           all.equal(fm1@re@theta, fm1.@theta, tol = 1.e-7),
+           all.equal(ranef(fm1), ranef(fm1.)))
> 
> L1 <- as.list(env(   fm1. @ env))
> L2 <- as.list(env(as(fm1, "lmerenv")))
> ns <- intersect((n1 <- names(L1)),
+                 (n2 <- names(L2)))
> n1[!(n1 %in% ns)] #    lmer1() extras
[1] "frame"
> n2[!(n2 %in% ns)] # new-lmer() extras
[1] "row.names" "names"     "wtres"     "wrss"      "V"        
> ns <- ns[!(ns %in% c("call", "compDev"))]# they will certainly differ by that ...
> all.equal(L1[ns], L2[ns]) 
[1] TRUE
> 
> 
> stopifnot(all.equal(fixef(fm1), fixef(fm2), tol = 1.e-13),
+ 	  all.equal(unname(fixef(fm1)),
+ 		    c(251.405104848485, 10.467285959595), tol = 1e-13),
+ 	  all.equal(cov2cor(vcov(fm1))["(Intercept)", "Days"],
+ 		    -0.13755, tol=1e-4))
> 
> if(getRversion() > "2.11.0") {
+     print(AIC(fm1, fm2))
+     print(BIC(fm1, fm2))
+ } else {
+     print(AIC(fm1)); print(AIC(fm2))
+     print(BIC(fm1)); print(BIC(fm2))
+ }
    df      AIC
fm1  6 1755.628
fm2  5 1753.669
    df      BIC
fm1  6 1774.786
fm2  5 1769.634
> 
> (fm3 <- lmer(Yield ~ 1|Batch, Dyestuff2))
Linear mixed model fit by REML  ['lmerDe']
Formula: Yield ~ 1 | Batch 
   Data: Dyestuff2 
 REML 
161.8 

Random effects:
 Groups   Name        Variance Std.Dev.
 Batch    (Intercept)  0.00    0.000   
 Residual             13.81    3.716   
Number of obs: 30, groups: Batch, 6

Fixed effects:
            Estimate Std. Error t value
(Intercept)   5.6656     0.6784   8.352
> stopifnot(all.equal(coef(summary(fm3)),
+ 		    array(c(5.6656, 0.67838803150, 8.3515624346),
+ 			  c(1,3), dimnames = list("(Intercept)",
+ 				  c("Estimate", "Std. Error", "t value")))))
> showProc.time() #
Time elapsed:  7.33 0.03 7.362 
> 
> ### {from ../man/lmer.Rd } --- compare lmer1 & lmer2 ---------------
> (fmX1 <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmer']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm.1 <- lmer1(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmer']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> (fmX2 <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.09   24.740         
          Days         35.07    5.922   0.066 
 Residual             654.94   25.592         
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm.2 <- lmer2(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML  ['lmerDe']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.57   25.051  
 Subject  Days         35.86    5.988  
 Residual             653.58   25.565  
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> fmX1s <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
> fmX2s <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
> 
> showProc.time() #
Time elapsed:  3.82 0.01 3.836 
> 
> for(nm in c("coef", "fixef", "ranef", "sigma",
+ 	     "model.matrix", "model.frame" , "terms")) {
+     cat(sprintf("%15s : ", nm))
+     FUN <- get(nm)
+     F.fmX1s <- FUN(fmX1s)
+     F.fmX2s <- FUN(fmX2s)
+     if(nm == "model.matrix") {
+         F.fmX1s <- as(F.fmX1s, "denseMatrix")
+         F.fmX2s <- as(F.fmX2s, "denseMatrix")
+ 	FF <- function(.) as(FUN(.), "generalMatrix")
+     } else FF <- FUN
+     stopifnot(
+ 	      all.equal( FF(fmX1), F.fmX1s, tol =  1e-6)# was 1e-6
+ 	      ,
+ 	      all.equal( FF(fmX2), F.fmX1s, tol = 9e-6)# was 9e-6 _ FIXME ?
+               ,
+               all.equal(F.fmX2s,   F.fmX1s, tol = 6e-6)# was 6e-6
+               ,
+               all.equal(FUN(fm.1), FUN(fm.2), tol = 6e-6)
+               ,
+               TRUE)
+     cat("[Ok]\n")
+ }
           coef : [Ok]
          fixef : [Ok]
          ranef : [Ok]
          sigma : [Ok]
   model.matrix : [Ok]
    model.frame : [Ok]
          terms : [Ok]
> 
> 
> ## transformed vars should work[even if non-sensical as here;failed in 0.995-1]
> fm2l <- lmer(log(Reaction) ~ log(Days+1) + (log(Days+1)|Subject),
+              data = sleepstudy, REML = FALSE)
> ## no need for an expand method now : xfm2 <- expand(fm2)
> 
> stopifnot(dim(ranef(fm2l)[[1]]) == c(18, 2),
+           is((c3 <- coef(fm3)), "coef.mer"),
+           all(fixef(fm3) == c3$Batch),## <-- IFF  \hat{\sigma^2} == 0
+           TRUE)
> 
> ## generalized linear mixed model
> ## TODO: (1) move these to ./glmer-ex.R
> ## ----  (2) "rationalize" with ../man/cbpp.Rd
> m1e <- glmer1(cbind(incidence, size - incidence) ~ period + (1 | herd),
+               family = binomial, data = cbpp, doFit = FALSE)
> ## now
> bobyqa(m1e, control = list(iprint = 2L))
npt = 11 , n =  5 
rhobeg =  0.3564557 , rhoend =  3.564557e-07 
   0.036:  12:      100.746;0.643544 -1.26902 -1.17076 -1.30141 -1.78228 
  0.0036:  31:      100.217;0.617949 -1.38012 -0.991794 -1.17155 -1.71363 
 0.00036:  55:      100.096;0.642449 -1.39817 -0.993307 -1.12976 -1.58178 
 3.6e-05:  64:      100.096;0.642273 -1.39849 -0.992296 -1.12897 -1.58042 
 3.6e-06:  81:      100.096;0.642266 -1.39854 -0.992342 -1.12868 -1.58033 
 3.6e-07:  92:      100.096;0.642261 -1.39853 -0.992333 -1.12867 -1.58031 
At return
102:     100.09586: 0.642261 -1.39853 -0.992333 -1.12867 -1.58031
parameter estimates: 0.642261241909766, -1.39853224865563, -0.992332501488445, -1.12867186656212, -1.5803138445048 
objective: 100.095856579516 
number of function evaluations: 103 
> m1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+             family = binomial, data = cbpp, verbose = 1)
npt = 11 , n =  5 
rhobeg =  0.3564557 , rhoend =  3.564557e-07 
   0.036:  12:      100.746;0.643544 -1.26902 -1.17076 -1.30141 -1.78228 
  0.0036:  31:      100.214;0.618256 -1.37876 -0.993404 -1.16983 -1.71283 
 0.00036:  55:      100.096;0.642059 -1.39849 -0.991763 -1.12846 -1.58091 
 3.6e-05:  64:      100.096;0.642310 -1.39860 -0.992359 -1.12856 -1.58047 
 3.6e-06:  72:      100.096;0.642286 -1.39856 -0.992334 -1.12867 -1.58032 
 3.6e-07:  84:      100.096;0.642281 -1.39856 -0.992330 -1.12867 -1.58031 
At return
 93:     100.09577: 0.642281 -1.39856 -0.992331 -1.12867 -1.58031
> stopifnot(is((cm1 <- coef(m1e)), "coef.mer"),
+ 	  dim(cm1$herd) == c(15,4),
+ 	  all.equal(fixef(m1), ##  these values are those of "old-lme4":
+ 		    c(-1.39853504914, -0.992334711,
+ 		      -1.12867541477, -1.58037390498),
+ 		    tol = 1.e-2, 
+                     check.attr=FALSE)
+ 	  )
> 
> ## Simple example by Andrew Gelman (2006-01-10) ----
> n.groups <- 10 ; n.reps <- 2
> n <- length(group.id <- gl(n.groups, n.reps))
> ## simulate the varying parameters and the data:
> set.seed(0)
> a.group <- rnorm(n.groups, 1, 2)
> y <- rnorm (n, a.group[group.id], 1)
> ## fit and summarize the model
> fit.1 <- lmer (y ~ 1 + (1 | group.id))
> coef (fit.1)# failed in Matrix 0.99-6
$group.id
   (Intercept)
1    3.3760015
2   -0.2384548
3    3.1859576
4    3.1121393
5    1.4381126
6   -1.7593543
7   -0.2546161
8    0.6977974
9    1.2121809
10   4.9433572

attr(,"class")
[1] "coef.mer"
> (sf1 <- summary(fit.1)) # show() is as without summary()
$methTitle
[1] "Linear mixed model fit by REML "

$devcomp
$devcomp$cmp
      ldL2      ldRX2      pwrss   deviance       REML 
26.8452812  0.3112042 12.6874321 74.5004151 73.4034352 

$devcomp$dims
    n     p   nmp     q useSc 
   20     1    19    10     1 


$isLmer
[1] TRUE

$useScale
[1] TRUE

$logLik
'log Lik.' -36.70172 (df=3)

$family
NULL

$ngrps
group.id 
      10 

$coefficients
            Estimate Std. Error  t value
(Intercept) 1.571312  0.6994118 2.246619

$sigma
[1] 0.8171656

$vcov
NULL

$varcor
$varcor$group.id
            (Intercept)
(Intercept)    4.557889
attr(,"stddev")
(Intercept) 
   2.134921 
attr(,"correlation")
            (Intercept)
(Intercept)           1

attr(,"sc")
[1] 0.8171656

$AICtab
    REML 
73.40344 

$call
lmer(formula = y ~ 1 + (1 | group.id))

attr(,"class")
[1] "summary.merenv"
> stopifnot(all.equal(fixef(fit.1), c("(Intercept)" = 1.571312129)),
+ 	  all.equal(ranef(fit.1)[["group.id"]][,"(Intercept)"],
+ 		   c(1.80469, -1.80977, 1.61465, 1.54083, -0.1332,
+ 		     -3.33067, -1.82593, -0.873515, -0.359131, 3.37204),
+ 		    tol = 1e-4)
+ 	  )
> 
> 
> ## ranef and coef
> rr <- ranef(fm1)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm1), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> rr <- ranef(fm2)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm2), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> 
> showProc.time() #
Time elapsed:  3.61 0.01 3.616 
> 
> if (require('MASS', quietly = TRUE)) {
+     bacteria$wk2 <- bacteria$week > 2
+     contrasts(bacteria$trt) <-
+         structure(contr.sdif(3),
+                   dimnames = list(NULL, c("diag", "encourage")))
+     print(fm5 <- glmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+     ## momentarily "fails": nlminb() stuck at theta=1
+ 
+     showProc.time() #
+ 
+     if(FALSE) ## numbers from 'lme4' ("old"): __ FIXME once glmer() stabilizes
+     stopifnot(
+               all.equal(logLik(fm5),
+                         structure(-96.13069, nobs = 220, nall = 220,
+                                   df = 5, REML = FALSE, class = "logLik"))
+               ,
+               all.equal(fixef(fm5),
+ 			c("(Intercept)"= 2.831609490, "trtdiag"= -1.366722631,
+ 			  "trtencourage"=0.5840147802, "wk2TRUE"=-1.598591346))
+               )
+ }
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerDe']
 Family: binomial 
Formula: y ~ trt + wk2 + (1 | ID) 
   Data: bacteria 
     AIC      BIC   logLik deviance 
  202.26   219.23   -96.13   192.26 

Random effects:
 Groups Name        Variance Std.Dev.
 ID     (Intercept) 1.544    1.242   
Number of obs: 220, groups: ID, 50

Fixed effects:
             Estimate Std. Error z value
(Intercept)    2.8316     0.4466   6.341
trtdiag       -1.3663     0.6566  -2.081
trtencourage   0.5838     0.6734   0.867
wk2TRUE       -1.5985     0.4612  -3.466

Correlation of Fixed Effects:
            (Intr) trtdig trtncr
trtdiag     -0.044              
trtencourag  0.064 -0.495       
wk2TRUE     -0.794  0.063 -0.056
Time elapsed:  1.58 0.01 1.645 
> 
> ## Invalid factor specification -- used to seg.fault:
> set.seed(1)
> dat <- within(data.frame(lagoon = factor(rep(1:4,each = 25)),
+                          habitat = factor(rep(1:20, each = 5))),
+           {
+               y <- round(10*rnorm(100, m = 10*as.numeric(lagoon)))
+           })
> 
> try(reg <- lmer(y ~ habitat + (1|habitat*lagoon), data = dat) # did seg.fault
+     ) # now gives error                 ^- should be ":"
Error in FUN(X[[1L]], ...) : 
  Invalid grouping factor specification, habitat * lagoon
In addition: Warning message:
In Ops.factor(habitat, lagoon) : * not meaningful for factors
> r1  <- lmer(y ~ 0+habitat + (1|habitat:lagoon), data = dat) # ok, but senseless
> r1b <- lmer(y ~ 0+habitat + (1|habitat), data = dat) # same model, clearly indeterminable
> ## "TODO" :  summary(r1)  should ideally warn the user
> stopifnot(all.equal(fixef(r1), fixef(r1b), tol= 1e-15),
+           all.equal(ranef(r1), ranef(r1b), tol= 1e-15, check.attributes=FALSE))
> 
> ## Use a more sensible model:
> r2.0 <- lmer(y ~ 0+lagoon + (1|habitat:lagoon), data = dat) # ok
> r2   <- lmer(y ~ 0+lagoon + (1|habitat), data = dat) # ok, and more clear
> stopifnot(all.equal(fixef(r2), fixef(r2.0), tol= 1e-15),
+           all.equal(ranef(r2), ranef(r2.0), tol= 1e-15, check.attributes=FALSE))
> V2 <- vcov(r2)
> assert.EQ.mat(V2, diag(x = 9.9833/3, nr = 4))
> stopifnot(all.equal(unname(fixef(r2)) - (1:4)*100,
+ 		    c(1.72, 0.28, 1.76, 0.8), tol = 1e-13))
> 
> ## sparseX version should give same numbers:
> r2.  <- lmer(y ~ 0+lagoon + (1|habitat), data = dat,
+              sparseX = TRUE, verbose = TRUE)
npt = 3 , n =  1 
rhobeg =  0.2 , rhoend =  2e-07 
   0.020:   6:      710.620; 0.00000 
  0.0020:   7:      709.745; 0.00000 
 0.00020:   9:      709.745; 0.00000 
 2.0e-05:   9:      709.745; 0.00000 
 2.0e-06:  11:      709.745; 0.00000 
 2.0e-07:  12:      709.745; 0.00000 
At return
 15:     709.74472:  0.00000
> 
> ## the summary() components we do want to compare 'dense X' vs 'sparse X':
> nmsSumm <- c("methTitle", "devcomp", "logLik", "ngrps", "coefficients",
+              "sigma", "REmat", "AICtab")
> sr2  <- summary(r2)
> sr2. <- summary(r2.)
> 
> stopifnot(all.equal(sr2[nmsSumm], sr2.[nmsSumm], tol= 1e-14),
+           all.equal(ranef(r2), ranef(r2.), tol= 1e-14),
+           Matrix:::isDiagonal(vcov(r2.)),# ok
+           all.equal(diag(vcov(r2.)), rep.int(V2[1,1], 4), tol= 1e-13)
+           ,
+ 	  all(vcov(r2.)@factors$correlation == diag(4)),
+           TRUE)
Note: Method with signature "dpoMatrix#generalMatrix" chosen for function "coerce",
 target signature "corMatrix#generalMatrix".
 "denseMatrix#generalMatrix" would also be valid
Note: Method with signature "dpoMatrix#dgeMatrix" chosen for function "coerce",
 target signature "corMatrix#dgeMatrix".
 "ddenseMatrix#dgeMatrix" would also be valid
> r2.
Linear mixed model fit by REML  ['lmerSp']
Formula: y ~ 0 + lagoon + (1 | habitat) 
   Data: dat 
 REML 
709.7 

Random effects:
 Groups   Name        Variance Std.Dev.
 habitat  (Intercept)  0.0     0.000   
 Residual             83.2     9.121   
Number of obs: 100, groups: habitat, 20

Fixed effects:
        Estimate Std. Error t value
lagoon1  101.720      1.824   55.76
lagoon2  200.280      1.824  109.79
lagoon3  301.760      1.824  165.42
lagoon4  400.800      1.824  219.71

Correlation of Fixed Effects:
        lagon1 lagon2 lagon3
lagoon2 0.000               
lagoon3 0.000  0.000        
lagoon4 0.000  0.000  0.000 
> 
> ## Failure to specify a random effects term - used to give an obscure message
> ## Ensure *NON*-translated message; works on Linux,... :
> Sys.setlocale("LC_MESSAGES", "C")
[1] "C"
> tc <- tryCatch(
+ 	       m2 <- glmer(incidence / size ~ period, weights = size,
+ 			   family = binomial, data = cbpp)
+ 	       , error = function(.) .)
> stopifnot(inherits(tc, "error"),
+ 	  identical(tc$message,
+ 		    "No random effects terms specified in formula"))
> 
> ### mcmcsamp() :
> ## From: Andrew Gelman <gelman@stat.columbia.edu>
> ## Date: Wed, 18 Jan 2006 22:00:53 -0500
> 
> if (FALSE) {  # mcmcsamp still needs work
+     has.coda <- require(coda)
+     if(!has.coda)
+         cat("'coda' package not available; some outputs will look suboptimal\n")
+ 
+     ## Very simple example
+     y <- 1:10
+     group <- gl(2,5)
+     (M1 <- lmer (y ~ 1 + (1 | group))) # works fine
+     (r1 <- mcmcsamp (M1))              # dito
+     r2 <- mcmcsamp (M1, saveb = TRUE)  # gave error in 0.99-* and 0.995-[12]
+     (r10 <- mcmcsamp (M1, n = 10, saveb = TRUE))
+ 
+     ## another one, still simple
+     y <- (1:20)*pi
+     x <- (1:20)^2
+     group <- gl(2,10)
+     M1 <- lmer (y ~ 1 | group)
+     mcmcsamp (M1, n = 2, saveb=TRUE) # fine
+ 
+     M2 <- lmer (y ~ 1 + x + (1 + x | group)) # false convergence
+     ## should be identical (and is)
+     M2 <- lmer (y ~ x + ( x | group))#  false convergence -> simulation doesn't work:
+     if(FALSE) ## try(..) fails here (in R CMD check) [[why ??]]
+         mcmcsamp (M2, saveb=TRUE)
+     ## Error: inconsistent degrees of freedom and dimension ...
+ 
+     ## mcmc for glmer:
+     rG1k <- mcmcsamp(m1, n = 1000)
+     summary(rG1k)
+     rG2 <- mcmcsamp(m1, n = 3, verbose = TRUE)
+ }
> 
> ## Spencer Graves' example (from a post to S-news, 2006-08-03) ----------------
> ## it should give an error, rather than silent non-sense:
> tstDF <- data.frame(group = letters[1:5], y = 1:5)
> assertError(## Now throws an error, as desired :
+             lmer(y ~ 1 + (1|group), data = tstDF)
+             )
> 
> showProc.time() #
Time elapsed:  1.85 0 1.85 
> 
> ## Wrong formula gave a seg.fault at times:
> set.seed(2)# !
> D <-  data.frame(y= rnorm(12,10), ff = gl(3,2,12),
+                  x1=round(rnorm(12,3),1), x2=round(rnorm(12,7),1))
> ## NB: The first two are the same, having a length-3 R.E. with 3 x 3 vcov-matrix:
> ## --> do need CPU
> m0 <- lmer(y ~ (x1 + x2)|ff, data = D)
> m1 <- lmer(y ~ x1 + x2|ff  , data = D)
> m2 <- lmer(y ~ x1 + (x2|ff), data = D)
> m3 <- lmer(y ~ (x2|ff) + x1, data = D)
> stopifnot(identical(ranef(m0), ranef(m1)),
+           identical(ranef(m2), ranef(m3)),
+           inherits(tryCatch(lmer(y ~ x2|ff + x1, data = D), error = function(e)e),
+                    "error"))
Warning message:
In Ops.factor(ff, x1) : + not meaningful for factors
> 
> showProc.time() #
Time elapsed:  20.26 0 20.391 
> 
> ## Reordering of grouping factors should not change the internal structure
> Pm1  <- lmer1(strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> Pm2  <- lmer1(strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> P2.1 <- lmer (strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> P2.2 <- lmer (strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> 
> ## The environments of Pm1 and Pm2 should be identical except for
> ## "call" and "frame":
> stopifnot(all.EQ(env(Pm1), env(Pm2)),
+           all.EQ(S4_2list(P2.1),
+                  S4_2list(P2.2)))
> 
> ## glmer - Modeling overdispersion as "mixture" aka
> ## ----- - *ONE* random effect *PER OBSERVATION" -- example inspired by Ben Bolker:
> 
> ##' <description>
> ##'
> ##' <details>
> ##' @title
> ##' @param ng number of groups
> ##' @param nr number of "runs", i.e., observations per groups
> ##' @param sd standard deviations of group and "Individual" random effects,
> ##'    (\sigma_f, \sigma_I)
> ##' @param b  true beta (fixed effects)
> ##' @return a data frame (to be used in glmer()) with columns
> ##'    (x, f, obs, eta0, eta, mu, y), where y ~ Pois(lambda(x)),
> ##'                                   log(lambda(x_i)) = b_1 + b_2 * x + G_{f(i)} + I_i
> ##'    and G_k ~ N(0, \sigma_f);  I_i ~ N(0, \sigma_I)
> ##' @author Ben Bolker and Martin Maechler
> rPoisGLMMi <- function(ng, nr, sd=c(f = 1, ind = 0.5), b=c(1,2))
+ {
+   stopifnot(nr >= 1, ng >= 1,
+             is.numeric(sd), names(sd) %in% c("f","ind"), sd >= 0)
+   ntot <- nr*ng
+   b.reff <- rnorm(ng,  sd= sd[["f"]])
+   b.rind <- rnorm(ntot,sd= sd[["ind"]])
+   x <- runif(ntot)
+   within(data.frame(x,
+                     f = factor(rep(LETTERS[1:ng], each=nr)),
+                     obs = 1:ntot,
+                     eta0 = cbind(1, x) %*% b),
+      {
+          eta <- eta0 + b.reff[f] + b.rind[obs]
+          mu <- exp(eta)
+          y <- rpois(ntot, lambda=mu)
+      })
+ }
> dd <- rPoisGLMMi(12, 20)
> m0  <- glmer(y~x + (1|f),           family="poisson", data=dd)
> (m1 <- glmer(y~x + (1|f) + (1|obs), family="poisson", data=dd))
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerDe']
 Family: poisson 
Formula: y ~ x + (1 | f) + (1 | obs) 
   Data: dd 
     AIC      BIC   logLik deviance 
    6713     6727    -3352     6705 

Random effects:
 Groups Name        Variance Std.Dev.
 obs    (Intercept) 0.08444  0.2906  
 f      (Intercept) 0.00000  0.0000  
Number of obs: 240, groups: obs, 240; f, 12

Fixed effects:
            Estimate Std. Error z value
(Intercept)  1.72321    0.05703   30.22
x            1.88974    0.09080   20.81

Correlation of Fixed Effects:
  (Intr)
x -0.895
> if(FALSE) # not yet available  -- FIXME
+ anova(m0, m1)
> 
> showProc.time()
Time elapsed:  4.04 0.01 4.084 
> 
