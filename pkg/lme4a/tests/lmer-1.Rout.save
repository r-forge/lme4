
R version 2.11.0 Under development (unstable) (2009-12-10 r50700)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(lme4a)
Loading required package: Matrix
Loading required package: lattice
> options(show.signif.stars = FALSE)
> 
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML 
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.091  24.7405        
          Days         35.072   5.9221  0.066 
 Residual             654.941  25.5918        
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm1a <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, REML = FALSE))
Linear mixed model fit by maximum likelihood 
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
  AIC  BIC logLik deviance
 1764 1783   -876     1752

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 565.516  23.7806        
          Days         32.682   5.7168  0.081 
 Residual             654.941  25.5918        
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.632   37.91
Days          10.467      1.502    6.97

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML 
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.569  25.0513 
 Subject  Days         35.858   5.9882 
 Residual             653.584  25.5653 
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> ## transformed vars should work[even if non-sensical as here;failed in 0.995-1]
> fm2l <- lmer(log(Reaction) ~ log(Days+1) + (log(Days+1)|Subject),
+              data = sleepstudy, REML = FALSE)
> if(FALSE)# not yet
+ xfm2 <- expand(fm2l)
> stopifnot(is(fm1, "merenv"), is(fm2l, "merenv"),
+           dim(ranef(fm2l)[[1]]) == c(18, 2),
+           TRUE) # not yet: is(xfm2$P, "sparseMatrix"))
> 
> ## generalized linear mixed model
> (m1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+             family = binomial, data = cbpp))
Generalized linear mixed model fit by the Laplace approximation 
Formula: cbind(incidence, size - incidence) ~ period + (1 | herd) 
   Data: cbpp 
 AIC BIC logLik deviance
 Inf Inf   -Inf      Inf
Random effects:
 Groups Name        Variance Std.Dev.
 herd   (Intercept) 24.999   4.9999  
Number of obs: 56, groups: herd, 15

Fixed effects:
            Estimate Std. Error z value Pr(>|z|)
(Intercept)  -3.1101     1.3360  -2.328   0.0199
period2       0.2933     0.2540   1.155   0.2482
period3       0.3203     0.2520   1.271   0.2036
period4      -1.6857     0.9139  -1.845   0.0651

Correlation of Fixed Effects:
        (Intr) perid2 perid3
period2 -0.169              
period3 -0.171  0.974       
period4 -0.047  0.268  0.270
There were 50 or more warnings (use warnings() to see the first 50)
> warnings() ## << FIXME
Warning messages:
1: In .local(x, pars, ...) : non-integer x = 0.142857
2: In .local(x, pars, ...) : non-integer x = 0.142857
3: In .local(x, pars, ...) : non-integer x = 0.250000
4: In .local(x, pars, ...) : non-integer x = 0.250000
5: In .local(x, pars, ...) : non-integer x = 0.444444
6: In .local(x, pars, ...) : non-integer x = 0.444444
7: In .local(x, pars, ...) : non-integer x = 0.136364
8: In .local(x, pars, ...) : non-integer x = 0.136364
9: In .local(x, pars, ...) : non-integer x = 0.055556
10: In .local(x, pars, ...) : non-integer x = 0.055556
11: In .local(x, pars, ...) : non-integer x = 0.047619
12: In .local(x, pars, ...) : non-integer x = 0.047619
13: In .local(x, pars, ...) : non-integer x = 0.363636
14: In .local(x, pars, ...) : non-integer x = 0.363636
15: In .local(x, pars, ...) : non-integer x = 0.125000
16: In .local(x, pars, ...) : non-integer x = 0.125000
17: In .local(x, pars, ...) : non-integer x = 0.100000
18: In .local(x, pars, ...) : non-integer x = 0.100000
19: In .local(x, pars, ...) : non-integer x = 0.200000
20: In .local(x, pars, ...) : non-integer x = 0.200000
21: In .local(x, pars, ...) : non-integer x = 0.222222
22: In .local(x, pars, ...) : non-integer x = 0.222222
23: In .local(x, pars, ...) : non-integer x = 0.277778
24: In .local(x, pars, ...) : non-integer x = 0.277778
25: In .local(x, pars, ...) : non-integer x = 0.250000
26: In .local(x, pars, ...) : non-integer x = 0.250000
27: In .local(x, pars, ...) : non-integer x = 0.176471
28: In .local(x, pars, ...) : non-integer x = 0.176471
29: In .local(x, pars, ...) : non-integer x = 0.050000
30: In .local(x, pars, ...) : non-integer x = 0.050000
31: In .local(x, pars, ...) : non-integer x = 0.500000
32: In .local(x, pars, ...) : non-integer x = 0.500000
33: In .local(x, pars, ...) : non-integer x = 0.100000
34: In .local(x, pars, ...) : non-integer x = 0.100000
35: In .local(x, pars, ...) : non-integer x = 0.333333
36: In .local(x, pars, ...) : non-integer x = 0.333333
37: In .local(x, pars, ...) : non-integer x = 0.352941
38: In .local(x, pars, ...) : non-integer x = 0.352941
39: In .local(x, pars, ...) : non-integer x = 0.222222
40: In .local(x, pars, ...) : non-integer x = 0.222222
41: In .local(x, pars, ...) : non-integer x = 0.045455
42: In .local(x, pars, ...) : non-integer x = 0.045455
43: In .local(x, pars, ...) : non-integer x = 0.045455
44: In .local(x, pars, ...) : non-integer x = 0.045455
45: In .local(x, pars, ...) : non-integer x = 0.090909
46: In .local(x, pars, ...) : non-integer x = 0.090909
47: In .local(x, pars, ...) : non-integer x = 0.185185
48: In .local(x, pars, ...) : non-integer x = 0.185185
49: In .local(x, pars, ...) : non-integer x = 0.136364
50: In .local(x, pars, ...) : non-integer x = 0.136364
> if(FALSE)#not yet
+ stopifnot(is(m1,"merenv"), is((cm1 <- coef(m1)), "coef.mer"),
+ 	  dim(cm1$herd) == c(15,4),
+           TRUE ## FIXME -- not at all :
+ 	  ## all.equal(fixef(m1),
+ 	  ##           c(-1.39853504914, -0.992334711,
+ 	  ##             -1.12867541477, -1.58037390498), check.attr=FALSE)
+ 	  )
> 
> ## Simple example by Andrew Gelman (2006-01-10) ----
> n.groups <- 10 ; n.reps <- 2
> n <- length(group.id <- gl(n.groups, n.reps))
> ## simulate the varying parameters and the data:
> set.seed(0)
> a.group <- rnorm(n.groups, 1, 2)
> y <- rnorm (n, a.group[group.id], 1)
> ## fit and summarize the model
> fit.1 <- lmer (y ~ 1 + (1 | group.id))
> coef (fit.1)# failed in Matrix 0.99-6
$group.id
   (Intercept)
1    3.3760015
2   -0.2384548
3    3.1859576
4    3.1121393
5    1.4381126
6   -1.7593543
7   -0.2546161
8    0.6977974
9    1.2121809
10   4.9433572

> (sf1 <- summary(fit.1)) # show() is as without summary()
$methTitle
[1] "Linear mixed model fit by REML"

$devcomp
$devcomp$cmp
      ldL2      ldRX2       prss   deviance       REML 
26.8452812  0.3112042 12.6874321 74.5004151 73.4034352 

$devcomp$dims
  n   p nmp   q 
 20   1  19  10 


$logLik
'log Lik.' -36.70172 (df=3)

$ngrps
group.id 
      10 

$sigma
[1] 0.8171656

$coefficients
            Estimate Std. Error  t value
(Intercept) 1.571312  0.6994118 2.246619

$vcov
1 x 1 Matrix of class "dpoMatrix"
            (Intercept)
(Intercept)   0.4891768

$REmat
 Groups     Name          Variance  Std.Dev. 
 "group.id" "(Intercept)" "4.55789" "2.13492"
 "Residual" ""            "0.66776" "0.81717"

$AICtab
    REML 
73.40344 

$call
lmer(formula = y ~ 1 + (1 | group.id))

attr(,"class")
[1] "summary.lmer2"
> stopifnot(all.equal(fixef(fit.1), c("(Intercept)" = 1.571312129)),
+ 	  all.equal(ranef(fit.1)[["group.id"]][,"(Intercept)"],
+ 		   c(1.80469, -1.80977, 1.61465, 1.54083, -0.1332,
+ 		     -3.33067, -1.82593, -0.873515, -0.359131, 3.37204),
+ 		    tol = 1e-4)
+ 	  )
> 
> 
> ## ranef and coef
> rr <- ranef(fm1)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> cc <- coef(fm1)
> stopifnot(is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
> rr <- ranef(fm2)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> cc <- coef(fm2)
> stopifnot(is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
> 
> if (require('MASS', quietly = TRUE)) {
+     bacteria$wk2 <- bacteria$week > 2
+     contrasts(bacteria$trt) <-
+         structure(contr.sdif(3),
+                   dimnames = list(NULL, c("diag", "encourage")))
+     print(fm5 <- glmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+ ###? the same?
+ ###? print(fm6 <- lmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+ 
+ #   if(FALSE) ## FIXME -- binomial  ? -- why the difference?
+        ## numbers from 'lme4' ("old"):
+ #    stopifnot(all.equal(logLik(fm5),
+ #                        structure(c(ML = -96.13069), nobs = c(n = 220), nall = c(n = 220),
+ #                                  df = c(p = 5), REML = FALSE, class = "logLik")),
+ #              all.equal(fixef(fm5),
+ #			c("(Intercept)"= 2.831609490, "trtdiag"= -1.366722631,
+ #			  "trtencourage"=0.5840147802, "wk2TRUE"=-1.598591346)))
+ }
Generalized linear mixed model fit by the Laplace approximation 
Formula: y ~ trt + wk2 + (1 | ID) 
   Data: bacteria 
   AIC   BIC logLik deviance
 625.9 642.9 -308.0    615.9
Random effects:
 Groups Name        Variance Std.Dev.
 ID     (Intercept) 0.61422  0.78372 
Number of obs: 220, groups: ID, 50

Fixed effects:
             Estimate Std. Error z value Pr(>|z|)
(Intercept)    2.1156     0.3017   7.013 2.34e-12
trtdiag       -0.9913     0.4837  -2.050  0.04041
trtencourage   0.4550     0.5174   0.879  0.37918
wk2TRUE       -1.1303     0.3473  -3.254  0.00114

Correlation of Fixed Effects:
            (Intr) trtdig trtncr
trtdiag      0.034              
trtencourag  0.050 -0.507       
wk2TRUE     -0.737  0.015 -0.028
> 
> ## Invalid factor specification -- used to seg.fault:
> set.seed(1)
> dat <- data.frame(y = round(10*rnorm(100)), lagoon = factor(rep(1:4,each = 25)),
+                   habitat = factor(rep(1:20, each = 5)))
> r1  <- lmer(y ~ habitat + (1|habitat:lagoon), data = dat) # ok
> stopifnot(all.equal(unname(fixef(r1)),
+ 		    c(1.4, 0, -1, 3.2, -0.6, -5.2, -1, 0.6, -1.2, 1.2,
+ 		      -0.6, 0.8, 3.4, 3.2, -5, -2.6, -2.2, 2.2, 7, -7.4)))
> 
> if (FALSE) {   # back to segfaulting again  ----- FIXME !!!!
+     try(
+         reg <- lmer(y ~ habitat + (1|habitat*lagoon), data = dat) # did seg.fault
+         ) # now gives error                 ^- should be ":"
+ }
> 
> ## Failure to specify a random effects term - used to give an obscure message
> try(
+ m2 <- glmer(incidence / size ~ period, weights = size,
+             family = binomial, data = cbpp)
+ )
Error in evalbars(formula, rho$frame, contrasts) : 
  No random effects terms specified in formula
> 
> ### mcmcsamp() :
> ## From: Andrew Gelman <gelman@stat.columbia.edu>
> ## Date: Wed, 18 Jan 2006 22:00:53 -0500
> 
> if (FALSE) {  # mcmcsamp still needs work
+     has.coda <- require(coda)
+     if(!has.coda)
+         cat("'coda' package not available; some outputs will look suboptimal\n")
+ 
+     ## Very simple example
+     y <- 1:10
+     group <- gl(2,5)
+     (M1 <- lmer (y ~ 1 + (1 | group))) # works fine
+     (r1 <- mcmcsamp (M1))              # dito
+     r2 <- mcmcsamp (M1, saveb = TRUE)  # gave error in 0.99-* and 0.995-[12]
+     (r10 <- mcmcsamp (M1, n = 10, saveb = TRUE))
+ 
+     ## another one, still simple
+     y <- (1:20)*pi
+     x <- (1:20)^2
+     group <- gl(2,10)
+     M1 <- lmer (y ~ 1 | group)
+     mcmcsamp (M1, n = 2, saveb=TRUE) # fine
+ 
+     M2 <- lmer (y ~ 1 + x + (1 + x | group)) # false convergence
+     ## should be identical (and is)
+     M2 <- lmer (y ~ x + ( x | group))#  false convergence -> simulation doesn't work:
+     if(FALSE) ## try(..) fails here (in R CMD check) [[why ??]]
+         mcmcsamp (M2, saveb=TRUE)
+     ## Error: inconsistent degrees of freedom and dimension ...
+ 
+     ## mcmc for glmer:
+     rG1k <- mcmcsamp(m1, n = 1000)
+     summary(rG1k)
+     rG2 <- mcmcsamp(m1, n = 3, verbose = TRUE)
+ }
> 
> ## Spencer Graves' example (from a post to S-news, 2006-08-03): ----------------
> ## FIXME?
> tstDF <- data.frame(group = letters[1:5], y = 1:5)
> var(tstDF$y) # == 2.5
[1] 2.5
> ## Now throws an error
> try(f.oops <- lmer(y ~ 1 + (1|group), data = tstDF))
> ##  summary(f.oops) ## or print(Matrix:::formatVC(VarCorr(f.oops)), quote = FALSE)
> ## ...
> ##   Groups   Name        Variance Std.Dev.
> ##   group    (Intercept) 1.81818  1.34840
> ##   Residual             0.68182  0.82572
> ## ...
> ##
> ##SG>	 This is ... silly, because there are zero degrees of freedom
> ##SG> to distinguish "group" from Residual.  It is comforting that the sum of
> ##SG> the variances sum to the variance of "y", ......
> ##SG>	 However, I would prefer to have the multilevel software catch this
> ##SG> case and optionally return an error or drop the redundant group
> ##SG> with a warning.
> 
> ## Wrong formula gave a seg.fault at times:
> D <-  data.frame(y= rnorm(20,10), ff = gl(4,5),
+                  x1=rnorm(20,3), x2=rnorm(20,7))
> m0 <- lmer(y ~ (x1 + x2)|ff, data = D)
> m1 <- lmer(y ~ x1 + x2|ff  , data = D)
> m2 <- lmer(y ~ x1 + (x2|ff), data = D)
> m3 <- lmer(y ~ (x2|ff) + x1, data = D)
> stopifnot(identical(ranef(m0), ranef(m1)),
+           identical(ranef(m2), ranef(m3)),
+           inherits(tryCatch(lmer(y ~ x2|ff + x1, data = D), error = function(e)e),
+                    "error"))
Warning message:
In Ops.factor(ff, x1) : + not meaningful for factors
> 
> ## Reordering of grouping factors should not change the internal structure
> Pm1 <- lmer(strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> Pm2 <- lmer(strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> ## The environments of Pm1 and Pm2 should be identical except for
> ## "call" and "frame"
> trunclist <- function(x) {
+     ll <- as.list(env(x))
+     ll[-match(c("call", "frame"), names(ll))]
+ }
> stopifnot(all.equal(trunclist(Pm1), trunclist(Pm2)))
> 
> cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
Time elapsed:  46.4 0.21 46.648 0 0 
> 
