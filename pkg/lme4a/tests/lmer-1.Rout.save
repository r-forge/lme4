
R version 2.10.1 Patched (2010-02-24 r51172)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(lme4a)
Loading required package: Matrix
Loading required package: lattice
Matrix_NS: <environment: namespace:Matrix>

Attaching package: 'Matrix'


	The following object(s) are masked from package:base :

	 det 

> options(show.signif.stars = FALSE)
> 
> source(system.file("test-tools.R", package = "Matrix"))# identical3() etc
> 
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML 
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 612.091  24.7405        
          Days         35.072   5.9221  0.066 
 Residual             654.941  25.5918        
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.825   36.84
Days          10.467      1.546    6.77

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm1a <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, REML = FALSE))
Linear mixed model fit by maximum likelihood 
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
  AIC  BIC logLik deviance
 1764 1783   -876     1752

Random effects:
 Groups   Name        Variance Std.Dev. Corr  
 Subject  (Intercept) 565.516  23.7806        
          Days         32.682   5.7168  0.081 
 Residual             654.941  25.5918        
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.632   37.91
Days          10.467      1.502    6.97

Correlation of Fixed Effects:
     (Intr)
Days -0.138
> (fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML 
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML 
1744 

Random effects:
 Groups   Name        Variance Std.Dev.
 Subject  (Intercept) 627.569  25.0513 
 Subject  Days         35.858   5.9882 
 Residual             653.584  25.5653 
Number of obs: 180, groups: Subject, 18

Fixed effects:
            Estimate Std. Error t value
(Intercept)  251.405      6.885   36.51
Days          10.467      1.560    6.71

Correlation of Fixed Effects:
     (Intr)
Days -0.184
> 
> (fm3 <- lmer(Yield ~ 1|Batch, Dyestuff2))
Linear mixed model fit by REML 
Formula: Yield ~ 1 | Batch 
   Data: Dyestuff2 
 REML 
161.8 

Random effects:
 Groups   Name        Variance Std.Dev.
 Batch    (Intercept)  0.000   0.0000  
 Residual             13.806   3.7157  
Number of obs: 30, groups: Batch, 6

Fixed effects:
            Estimate Std. Error t value
(Intercept)   5.6656     0.6784   8.352
> stopifnot(all.equal(coef(summary(fm3)),
+ 		    array(c(5.6656, 0.67838803150, 8.3515624346),
+ 			  c(1,3), dimnames = list("(Intercept)",
+ 				  c("Estimate", "Std. Error", "t value")))))
> 
> ## transformed vars should work[even if non-sensical as here;failed in 0.995-1]
> fm2l <- lmer(log(Reaction) ~ log(Days+1) + (log(Days+1)|Subject),
+              data = sleepstudy, REML = FALSE)
> if(FALSE)# no need for an expand method now
+ xfm2 <- expand(fm2l)
> stopifnot(is(fm1, "merenv"), is(fm2l, "merenv"),
+           dim(ranef(fm2l)[[1]]) == c(18, 2),
+           TRUE)
> 
> ## generalized linear mixed model
> (m1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+              family = binomial, data = cbpp))
<environment: 0x849f048>
> if(FALSE)#not yet
+ stopifnot(is(m1,"merenv"), is((cm1 <- coef(m1)), "coef.mer"),
+ 	  dim(cm1$herd) == c(15,4),
+           TRUE ## FIXME -- not at all :
+ 	  ## all.equal(fixef(m1),
+ 	  ##           c(-1.39853504914, -0.992334711,
+ 	  ##             -1.12867541477, -1.58037390498), check.attr=FALSE)
+ 	  )
> 
> ## Simple example by Andrew Gelman (2006-01-10) ----
> n.groups <- 10 ; n.reps <- 2
> n <- length(group.id <- gl(n.groups, n.reps))
> ## simulate the varying parameters and the data:
> set.seed(0)
> a.group <- rnorm(n.groups, 1, 2)
> y <- rnorm (n, a.group[group.id], 1)
> ## fit and summarize the model
> fit.1 <- lmer (y ~ 1 + (1 | group.id))
> coef (fit.1)# failed in Matrix 0.99-6
$group.id
   (Intercept)
1    3.3760015
2   -0.2384548
3    3.1859576
4    3.1121393
5    1.4381126
6   -1.7593543
7   -0.2546161
8    0.6977974
9    1.2121809
10   4.9433572

> (sf1 <- summary(fit.1)) # show() is as without summary()
$methTitle
[1] "Linear mixed model fit by REML"

$devcomp
$devcomp$cmp
      ldL2      ldRX2      pwrss   deviance       REML 
26.8452812  0.3112042 12.6874321 74.5004151 73.4034352 

$devcomp$dims
  n   p nmp   q 
 20   1  19  10 


$logLik
'log Lik.' -36.70172 (df=3)

$ngrps
group.id 
      10 

$coefficients
            Estimate Std. Error  t value
(Intercept) 1.571312  0.6994118 2.246619

$sigma
[1] 0.8171656

$vcov
1 x 1 Matrix of class "dpoMatrix"
            (Intercept)
(Intercept)   0.4891768

$REmat
 Groups     Name          Variance  Std.Dev. 
 "group.id" "(Intercept)" "4.55789" "2.13492"
 "Residual" ""            "0.66776" "0.81717"

$AICtab
    REML 
73.40344 

$call
lmer(formula = y ~ 1 + (1 | group.id))

attr(,"class")
[1] "summary.lmer"
> stopifnot(all.equal(fixef(fit.1), c("(Intercept)" = 1.571312129)),
+ 	  all.equal(ranef(fit.1)[["group.id"]][,"(Intercept)"],
+ 		   c(1.80469, -1.80977, 1.61465, 1.54083, -0.1332,
+ 		     -3.33067, -1.82593, -0.873515, -0.359131, 3.37204),
+ 		    tol = 1e-4)
+ 	  )
> 
> 
> ## ranef and coef
> rr <- ranef(fm1)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> cc <- coef(fm1)
> stopifnot(is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> rr <- ranef(fm2)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> cc <- coef(fm2)
> stopifnot(is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> 
> if (require('MASS', quietly = TRUE)) {
+     bacteria$wk2 <- bacteria$week > 2
+     contrasts(bacteria$trt) <-
+         structure(contr.sdif(3),
+                   dimnames = list(NULL, c("diag", "encourage")))
+ ##    print(fm5 <- glmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+ ###? the same?
+ ###? print(fm6 <- lmer(y ~ trt + wk2 + (1|ID), bacteria, binomial))
+ 
+ #   if(FALSE) ## FIXME -- binomial  ? -- why the difference?
+        ## numbers from 'lme4' ("old"):
+ #    stopifnot(all.equal(logLik(fm5),
+ #                        structure(c(ML = -96.13069), nobs = c(n = 220), nall = c(n = 220),
+ #                                  df = c(p = 5), REML = FALSE, class = "logLik")),
+ #              all.equal(fixef(fm5),
+ #			c("(Intercept)"= 2.831609490, "trtdiag"= -1.366722631,
+ #			  "trtencourage"=0.5840147802, "wk2TRUE"=-1.598591346)))
+ }
> 
> ## Invalid factor specification -- used to seg.fault:
> set.seed(1)
> dat <- within(data.frame(lagoon = factor(rep(1:4,each = 25)),
+                          habitat = factor(rep(1:20, each = 5))),
+           {
+               y <- round(10*rnorm(100, m = 10*as.numeric(lagoon)))
+           })
> 
> try(reg <- lmer(y ~ habitat + (1|habitat*lagoon), data = dat) # did seg.fault
+     ) # now gives error                 ^- should be ":"
Error in FUN(X[[1L]], ...) : 
  Invalid grouping factor specification, habitat * lagoon
In addition: Warning message:
In Ops.factor(habitat, lagoon) : * not meaningful for factors
> r1  <- lmer(y ~ 0+habitat + (1|habitat:lagoon), data = dat) # ok, but senseless
> r1b <- lmer(y ~ 0+habitat + (1|habitat), data = dat) # same model, clearly indeterminable
> ## "TODO" :  summary(r1)  should ideally warn the user
> stopifnot(all.equal(fixef(r1), fixef(r1b), tol= 1e-15),
+           all.equal(ranef(r1), ranef(r1b), tol= 1e-15, check.attributes=FALSE))
> 
> ## Use a more sensible model:
> r2.0 <- lmer(y ~ 0+lagoon + (1|habitat:lagoon), data = dat) # ok
> r2   <- lmer(y ~ 0+lagoon + (1|habitat), data = dat) # ok, and more clear
> stopifnot(all.equal(fixef(r2), fixef(r2.0), tol= 1e-15),
+           all.equal(ranef(r2), ranef(r2.0), tol= 1e-15, check.attributes=FALSE))
> V2 <- vcov(r2)
> assert.EQ.mat(V2, diag(x = 9.9833/3, nr = 4))
> stopifnot(all.equal(unname(fixef(r2)) - (1:4)*100,
+ 		    c(1.72, 0.28, 1.76, 0.8), tol = 1e-13))
> 
> ## sparseX version should give same numbers:
> r2.  <- lmer(y ~ 0+lagoon + (1|habitat), data = dat,
+              sparseX = TRUE, verbose = TRUE)
  0:     727.74191:  1.00000
  1:     709.74472:  0.00000
  2:     709.74472:  0.00000
> stopifnot(all.equal(fixef(r2), fixef(r2.), tol= 1e-14),
+           Matrix:::isDiagonal(vcov(r2.)),# ok
+           TRUE ##all.equal(diag(vcov(r2.)), rep.int(V2[1,1], 4), tol= 1e-13)
+           ,## FIXME FIXME ^^^^ currently fails...
+ 	  all(vcov(r2.)@factors$correlation == diag(4)),
+           TRUE)
Note: Method with signature "dpoMatrix#generalMatrix" chosen for function "coerce",
 target signature "corMatrix#generalMatrix".
 "denseMatrix#generalMatrix" would also be valid
Note: Method with signature "dpoMatrix#dgeMatrix" chosen for function "coerce",
 target signature "corMatrix#dgeMatrix".
 "ddenseMatrix#dgeMatrix" would also be valid
> r2.
Linear mixed model fit by REML 
Formula: y ~ 0 + lagoon + (1 | habitat) 
   Data: dat 
 REML 
709.7 

Random effects:
 Groups   Name        Variance Std.Dev.
 habitat  (Intercept)  0.000   0.000   
 Residual             83.194   9.121   
Number of obs: 100, groups: habitat, 20

Fixed effects:
        Estimate Std. Error t value
lagoon1  101.720      9.121   11.15
lagoon2  200.280      9.121   21.96
lagoon3  301.760      9.121   33.08
lagoon4  400.800      9.121   43.94

Correlation of Fixed Effects:
        lagon1 lagon2 lagon3
lagoon2 0.000               
lagoon3 0.000  0.000        
lagoon4 0.000  0.000  0.000 
> 
> ## Failure to specify a random effects term - used to give an obscure message
> ## Desired is
> ##>>  Error in evalbars(formula, rho$frame, contrasts) :
> ##>>    No random effects terms specified in formula
> ##-- however, that is *again* no longer the case __ FIXME __
> tc <- tryCatch(
+                m2 <- glmer(incidence / size ~ period, weights = size,
+                            family = binomial, data = cbpp)
+                , error = function(.) .)
> stopifnot(inherits(tc, "error"))
> ## TODO: *check* the error message -- assuming it is *not* translated
> 
> 
> ### mcmcsamp() :
> ## From: Andrew Gelman <gelman@stat.columbia.edu>
> ## Date: Wed, 18 Jan 2006 22:00:53 -0500
> 
> if (FALSE) {  # mcmcsamp still needs work
+     has.coda <- require(coda)
+     if(!has.coda)
+         cat("'coda' package not available; some outputs will look suboptimal\n")
+ 
+     ## Very simple example
+     y <- 1:10
+     group <- gl(2,5)
+     (M1 <- lmer (y ~ 1 + (1 | group))) # works fine
+     (r1 <- mcmcsamp (M1))              # dito
+     r2 <- mcmcsamp (M1, saveb = TRUE)  # gave error in 0.99-* and 0.995-[12]
+     (r10 <- mcmcsamp (M1, n = 10, saveb = TRUE))
+ 
+     ## another one, still simple
+     y <- (1:20)*pi
+     x <- (1:20)^2
+     group <- gl(2,10)
+     M1 <- lmer (y ~ 1 | group)
+     mcmcsamp (M1, n = 2, saveb=TRUE) # fine
+ 
+     M2 <- lmer (y ~ 1 + x + (1 + x | group)) # false convergence
+     ## should be identical (and is)
+     M2 <- lmer (y ~ x + ( x | group))#  false convergence -> simulation doesn't work:
+     if(FALSE) ## try(..) fails here (in R CMD check) [[why ??]]
+         mcmcsamp (M2, saveb=TRUE)
+     ## Error: inconsistent degrees of freedom and dimension ...
+ 
+     ## mcmc for glmer:
+     rG1k <- mcmcsamp(m1, n = 1000)
+     summary(rG1k)
+     rG2 <- mcmcsamp(m1, n = 3, verbose = TRUE)
+ }
> 
> ## Spencer Graves' example (from a post to S-news, 2006-08-03): ----------------
> ## FIXME?
> tstDF <- data.frame(group = letters[1:5], y = 1:5)
> var(tstDF$y) # == 2.5
[1] 2.5
> ## Now throws an error -- not anymore in lme4a -- FIXME <<
> try(f.oops <- lmer(y ~ 1 + (1|group), data = tstDF))
> f.oops
Linear mixed model fit by REML 
Formula: y ~ 1 + (1 | group) 
   Data: tstDF 
 REML 
16.63 

Random effects:
 Groups   Name        Variance Std.Dev.
 group    (Intercept) 1.25     1.1180  
 Residual             1.25     1.1180  
Number of obs: 5, groups: group, 5

Fixed effects:
            Estimate Std. Error t value
(Intercept)   3.0000     0.7071   4.243
> ##  summary(f.oops) ## or print(Matrix:::formatVC(VarCorr(f.oops)), quote = FALSE)
> ## ...
> ##   Groups   Name        Variance Std.Dev.
> ##   group    (Intercept) 1.81818  1.34840
> ##   Residual             0.68182  0.82572
> ## ...
> ##
> ##SG>	 This is ... silly, because there are zero degrees of freedom
> ##SG> to distinguish "group" from Residual.  It is comforting that the sum of
> ##SG> the variances sum to the variance of "y", ......
> ##SG>	 However, I would prefer to have the multilevel software catch this
> ##SG> case and optionally return an error or drop the redundant group
> ##SG> with a warning.
> 
> ## Wrong formula gave a seg.fault at times:
> D <-  data.frame(y= rnorm(20,10), ff = gl(4,5),
+                  x1=rnorm(20,3), x2=rnorm(20,7))
> m0 <- lmer(y ~ (x1 + x2)|ff, data = D)
> m1 <- lmer(y ~ x1 + x2|ff  , data = D)
> m2 <- lmer(y ~ x1 + (x2|ff), data = D)
> m3 <- lmer(y ~ (x2|ff) + x1, data = D)
> stopifnot(identical(ranef(m0), ranef(m1)),
+           identical(ranef(m2), ranef(m3)),
+           inherits(tryCatch(lmer(y ~ x2|ff + x1, data = D), error = function(e)e),
+                    "error"))
Warning message:
In Ops.factor(ff, x1) : + not meaningful for factors
> 
> ## Reordering of grouping factors should not change the internal structure
> Pm1 <- lmer(strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> Pm2 <- lmer(strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> ## The environments of Pm1 and Pm2 should be identical except for
> ## "call" and "frame":
> if(exists("all.equal.X")) {
+     all.equal.notCall <- function(x,y,...)
+     all.equal.X(env(x), env(y), except = c("call", "frame"), ...)
+ } else {
+     trunclist <- function(x) {
+ 	ll <- as.list(env(x))
+ 	ll[-match(c("call", "frame"), names(ll))]
+     }
+     all.equal.notCall <- function(x,y,...)
+         all.equal(trunclist(x), trunclist(x), ...)
+ }
> stopifnot(all.equal.notCall(Pm1, Pm2))
> 
> cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
Time elapsed:  10.046 0.257 10.586 0 0 
> 
