useDynLib(lme4Eigen, .registration=TRUE)

## Import non-base functions we need explicitly,
## notably for which we define methods:

## FIXME -- really need all these -- fully imported -- ???
import("grid")
import("lattice")
import("splines")

importFrom("graphics", plot)
importFrom("nlme", fixef, ranef, VarCorr)
importFrom("stats"
           , AIC
           , BIC
           , anova
           , coef
           , coefficients
           , confint
           , deviance
           , fitted
           , fitted.values
           , formula
           , getCall
           , logLik
           , model.frame
           , model.matrix
           , predict
           , profile
           , residuals
           , resid
           , simulate
           , terms
           , update
           , vcov
           )

importFrom("minqa", bobyqa)

importClassesFrom("Matrix",
                  CHMfactor,
                  CHMsimpl,
                  CHMsuper,
                  Cholesky,
                  Matrix,
                  corMatrix,
                  dCHMsimpl,
                  dCHMsuper,
                  dMatrix,
                  ddiMatrix,
                  dgCMatrix,
                  dgeMatrix,
                  dpoMatrix,
                  dsCMatrix,
                  nCHMsimpl,
                  nCHMsuper,
                  symmetricMatrix)

importFrom("MatrixModels", model.Matrix)

importClassesFrom("MatrixModels",
                  modelMatrix,
                  denseModelMatrix,  ddenseModelMatrix,
                  sparseModelMatrix, dsparseModelMatrix
                  )

importMethodsFrom("Matrix"
                  , "%*%"
                  , Cholesky
                  , as.vector
                  , chol
                  , chol2inv
                  , coerce
                  , crossprod
                  , determinant
                  , diag
		  , rcond
                  , solve
                  , t
                  , tcrossprod
                  ## , update
                  )

# exportPattern("^[^\\.]")

# and the rest (S3 generics; regular functions):
export(
#       GHQ,
       VarCorr,
       bootMer,
       devcomp,
       findbars,
       fixef,
       getL, getME,
       glmFamily,
       glmResp,
       glmer,
       isNested,
       lmList,
       lmResp,       
       lmer,
       lmerResp,
       mkdevfun,
       nlsResp,
       nlmer,
       nobars,
       merPredD,
       ranef,
       refitML,
       sigma,
       subbars
       )

exportClasses(
              glmerMod,
              glmFamily,
              glmResp,
 	      lmerMod,
              lmerResp,
 	      lmList,
              lmResp,
 	      merPredD,
 	      merMod,
              nlsResp
 	      )

exportMethods(
              coef
              , coerce
              , getL
              , rcond
              , show
              , sigma
              ## , update
              )

## S3 methods - S4 methods are not created when dispatch is on the first argument only

S3method(confint, lmList)

S3method(plot, lmList.confint)

S3method(VarCorr, merMod)
S3method(anova, merMod)
S3method(coef, merMod)
S3method(deviance, merMod)
S3method(devcomp, merMod)
S3method(drop1, merMod)
S3method(extractAIC, merMod)
S3method(fixef, merMod)
S3method(fitted, merMod)
S3method(formula, merMod)
S3method(logLik, merMod)
S3method(model.frame, merMod)
S3method(model.matrix, merMod)
S3method(print, merMod)
S3method(profile, merMod)
S3method(ranef, merMod)# <- hide inspite of extra args..
S3method(residuals, merMod)
S3method(simulate, merMod)
S3method(summary, merMod)
S3method(terms, merMod)
S3method(vcov, merMod)
S3method(refitML, merMod)

S3method(print, summary.mer)
S3method(summary, summary.mer)
S3method(vcov, summary.mer)

S3method(plot, coef.mer)
S3method(dotplot, coef.mer)

S3method(plot, ranef.mer)
S3method(qqmath, ranef.mer)
S3method(dotplot, ranef.mer)

## profile() related:
S3method(xyplot, thpr)
S3method(densityplot, thpr)
S3method(confint, thpr)
S3method(splom, thpr)
S3method(log, thpr)
