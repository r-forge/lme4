% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.

\documentclass[dvipsnames,pdflatex,beamer]{beamer}
%\documentclass[letterpaper,11pt,notitlepage]{article}\usepackage{beamerarticle}
\mode<article>{\usepackage[text={6.2in,9in},centering]{geometry}}
\mode<beamer>{\usetheme{Boadilla}\usecolortheme{seahorse}\usecolortheme{rose}}
\usepackage{SweaveSlides}
\title[Intro to R]{Mixed models in R using the lme4 package\\Part 1: Introduction to R}
<<preliminaries,echo=FALSE,results=hide>>=
options(width=69,show.signif.stars=FALSE,str=strOptions(strict.width = "cut"))
@ 
\begin{document}

\mode<article>{\maketitle\tableofcontents}
\mode<presentation>{\frame{\titlepage}}
\mode<presentation>{\frame{\frametitle{Outline}\tableofcontents[pausesections,hideallsubsections]}}

\section[Web site]{Web site and following the R code}

\begin{frame}
  \frametitle{Web sites associated with the tutorial}
  \begin{description}
  \item[www.R-project.org] Main web site for the R Project
  \item[cran.R-project.org] Comprehensive R Archive Network primary site
  \item[cran.us.R-project.org] Main U.S. mirror for CRAN
  \item[R-forge.R-project.org] R-Forge, development site for many
    public R packages.  This is also the URL of the repository for
    installing the development versions of the \code{lme4} and
    \code{Matrix} packages, if you are so inclined.
  \item[lme4.R-forge.R-project.org] development site for the \code{lme4} package
  \item[lme4.R-forge.R-project.org/slides/2010-09-23-Rahway] web site for this short course
  \end{description}
\end{frame}

\begin{frame}
  \frametitle{Following the operations on the slides}
  \begin{itemize}
  \item The lines of \R code shown on these slides are available in
    files on the course web site.  The file for this section is called
    \code{1Intro.R}.
  \item If you open this file in the \R application (the
    \code{File}$\rightarrow$\code{Open} menu item or \code{<ctrl>-O})
    and position the cursor at a particular line, then \code{<ctrl>-R}
    will send the line to the console window for execution and step to
    the next line.
  \item Any part of a line following a \code{\#} symbol is a comment.
  \item The code is divided into named ``chunks'', typically one chunk
    per slide that contains code.
  \item In the system called \code{Sweave} used to generate the slides
    the result of a call to a graphics function must be
    \code{print}ed.  In interactive use this is not necessary but
    neither is it harmful.
  \end{itemize}
\end{frame}

\section[Data]{Organizing data}

\begin{frame}
  \frametitle{Organizing data in R}
  \begin{itemize}
  \item Standard rectangular data sets (columns are variables,
    rows are observations) are stored in \R{} as \Emph{data
      frames}.
  \item The columns can be \Emph{numeric} variables (e.g. measurements
    or counts) or \Emph{factor} variables (categorical data) or
    \Emph{ordered} factor variables.  These types are called the
    \Emph{class} of the variable.
  \item The \code{str} function provides a concise description of the
    structure of a data set (or any other class of object in R).  The
    \code{summary} function summarizes each variable according to its
    class.  Both are highly recommended for routine use.
  \item Entering just the name of the data frame causes it to be
    printed.  For large data frames use the \code{head} and \code{tail}
    functions to view the first few or last few rows.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Data input}
  \begin{itemize}
  \item The simplest way to input a rectangular data set is to save it
    as a comma-separated value (csv) file and read it with
    \code{read.csv}.
  \item The first argument to \code{read.csv} is the name of the file.
    On Windows it can be tricky to get the file path correct
    (backslashes need to be doubled).  The best approach is to use the
    function \code{file.choose} which brings up a ``chooser'' panel
    through which you can select a particular file.  The idiom to remember is
<<readcsv,eval=FALSE>>=
mydata <- read.csv(file.choose())
@ 
    for comma-separated value files or
<<readcsv,eval=FALSE>>=
mydata <- read.delim(file.choose())
@ 
    for files with tab-delimited data fields.
  \item If you are connected to the Internet you can use a URL (within
    quotes) as the first argument to \code{read.csv} or
    \code{read.delim}. (See question 1 in the first set of exercises)
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{In-built data sets}
  \begin{itemize}
  \item One of the packages attached by default to an \R session is
    the \code{datasets} package that contains several data sets culled
    primarily from introductory statistics texts.
  \item We will use some of these data sets for illustration.
  \item The \code{Formaldehyde} data are from a calibration
    experiment, \code{Insectsprays} are from an experiment on the
    effectiveness of insecticides.
  \item Use \code{?} followed by the name of a function or data set to
    view its documentation.  If the documentation contains an example
    section, you can execute it with the \code{example} function.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{The Formaldehyde data}
<<Formaldehyde>>=
str(Formaldehyde)
summary(Formaldehyde)
Formaldehyde
@   
\end{frame}

\begin{frame}[fragile]
  \frametitle{The InsectSprays data}
<<InsectSprays>>=
str(InsectSprays)
summary(InsectSprays)
head(InsectSprays)
@   
\end{frame}

\begin{frame}[fragile]
  \frametitle{Copying, saving and restoring data objects}
  \begin{itemize}
  \item Assigning a data object to a new name creates a copy.
  \item You can save a data object to a file, typically with the
    extension \code{.rda} or \code{.Rdata}, using the \code{save} function.
  \item To restore the object you \code{load} the file.
  \end{itemize}
<<saverestore>>=
sprays <- InsectSprays
save(sprays, file = "sprays.rda")
rm(sprays)
ls.str()
load("sprays.rda")
names(sprays)
@   
\end{frame}

\section[Variables]{Accessing and modifying variables}

\begin{frame}[fragile]
  \frametitle{Accessing and modifying variables}
  \begin{itemize}
  \item The \code{\$} operator is used to access variables within a data frame.
<<dollarop>>=
Formaldehyde$carb
@ %$     
  \item You can also use \code{\$} to assign to a variable name
<<dollaropleft>>=
sprays$sqrtcount <- sqrt(sprays$count)
names(sprays)
@     
  \item Assigning the special value \code{NULL} to the name of a
    variable removes it.
<<dollaropleftNULL>>=
sprays$sqrtcount <- NULL
names(sprays)
@ %$  
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Using with and within}
  \begin{itemize}
  \item In complex expressions it can become tedious to repeatedly
    type the name of the data frame.
  \item The \code{with} function allows for direct access to variable
    names within an expression.  It provides ``read-only'' access.
<<formalfoo>>=
Formaldehyde$carb * Formaldehyde$optden
with(Formaldehyde, carb * optden)
@ 
  \item The \code{within} function provides read-write access to a data
    frame.  It does not change the original frame; it returns a modified
    copy.  To change the stored object you must assign the result
    to the name.
<<within>>=
sprays <- within(sprays, sqrtcount <- sqrt(count))
str(sprays)
@ 
  \end{itemize}
\end{frame}

\begin{frame}\frametitle{Data Organization}
  \begin{itemize}
  \item Careful consideration of the data layout for experimental or
    observational data is repaid in later ease of analysis.  Sadly, the
    widespread use of spreadsheets does not encourage such careful
    consideration.
  \item If you are organizing data in a table, use consistent data
    types within columns.  Databases require this; spreadsheets don't.
  \item A common practice in some disciplines is to convert
    categorical data to 0/1 ``indicator variables'' or to code the levels
    as numbers with a separate ``data key''.  This practice is
    unnecessary and error-inducing in \R.  When you see categorical
    variables coded as numeric variables, change them to factors or
    ordered factors.
  \item Spreadsheets also encourage the use of a ``wide'' data format,
    especially for longitudinal data.  Each row corresponds to an
    experimental unit and multiple observation occasions are
    represented in different columns.  The ``long'' format is
    preferred in \R.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Converting numeric variables to factors}
  \begin{itemize}
  \item The \code{factor} (\code{ordered}) function creates a factor
    (ordered factor) from a vector.  Factor labels can be specified in
    the optional \code{labels} argument.
  \item Suppose the \code{spray} variable in the \code{InsectSprays}
    data was stored as numeric values $1, 2,\dots,6$.  We convert it
    back to a factor with \code{factor}.
  \end{itemize}
<<sprays>>=
str(sprays <- within(InsectSprays, spray <- as.integer(spray)))
str(sprays <- within(sprays, spray <- factor(spray, labels = LETTERS[1:6])))
@ 
\end{frame}

\section[Subsets]{Subsets of data frames}

\begin{frame}[fragile]
  \frametitle{Subsets of data frames}
  \begin{itemize}
  \item The \code{subset} function is used to extract a subset of the
    rows or of the columns or of both from a data frame.
  \item The first argument is the name of the data frame. The
    second is an expression indicating which rows are to be selected.
  \item This expression often uses logical operators such as
    \code{==}, the equality comparison, or \code{!=}, the inequality
    comparison, \code{>=}, meaning ``greater than or equal to'', etc.
<<sprayA>>=
str(sprayA <- subset(sprays, spray == "A"))
@   
  \item The optional argument \code{select} can be used to specify the
    variables to be included.  There is an example of its use in
    question 4 of the first set of exercises.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Subsets and factors}
  \begin{itemize}
  \item The way that factors are defined, a subset of a factor retains
    the original set of levels.  Usually this is harmless but
    sometimes it can cause unexpected results.
  \item You can ``drop unused levels'' by applying \code{factor} to
    the factor.  Many functions, such as \code{xtabs}, which is used to
    create cross-tabulations, have optional arguments with names like
    \code{drop.unused.levels} to automate this.
  \end{itemize}
<<xtabssprays>>=
xtabs( ~ spray, sprayA)
xtabs( ~ spray, sprayA, drop = TRUE)
@ 
\end{frame}

\begin{frame}[fragile]
  \frametitle{Dropping unused levels in the spray factor and \%in\%}
<<sprayAdrop>>=
str(sprayA <- within(sprayA, spray <- factor(spray)))
xtabs( ~ spray, sprayA)
@   
  \begin{itemize}
  \item Another useful comparison operator is \code{\%in\%} for
    selecting a subset of the values in a variable.
  \end{itemize}
<<sprayDEF>>=
str(sprayDEF <- subset(sprays, spray %in% c("D","E","F")))
@ 
\end{frame}

\begin{frame}[fragile]
  \frametitle{``Long'' and ``wide'' forms of data}
  \begin{itemize}
  \item Spreadsheet users tend to store balanced data, such as
    \code{InsectSprays}, across many columns.  This is called the
    ``wide'' format.  The \code{unstack} function converts a simple
    ``long'' data set to wide; \code{stack} for the other way.
<<unstack>>=
str(unstack(InsectSprays))
@     
  \item The problem with the wide format is that it only works for
  balanced data.  A designed experiment may produce balanced data
  (although ``Murphy's Law'' would indicate otherwise) but
  observational data are rarely balanced.
\item Stay with the long format (all the observations on all the units
  are in a single column) when possible.
\end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Using reshape}
  \begin{itemize}
  \item The \code{reshape} function allows for more general
    translations of long to wide and vice-versa.  It is specifically
    intended for longitudinal data.
  \item There is also a package called \code{"reshape"} with even more
    general (but potentially confusing) capabilities.
  \item Phil Spector's book, \Emph{Data Manipulation
      with R} (Springer, 2008) covers this topic in more detail.
  \end{itemize}
\end{frame}

<<<classprep,echo=FALSE,results=hide>>=
if (file.exists("classroom.rda")) {
  load("classroom.rda")
} else {
    classroom <- within(read.csv("http://www-personal.umich.edu/~bwest/classroom.csv"),
                        schoolid <- factor(schoolid))
}
@ 

\begin{frame}[fragile]
\frametitle{Determining unique rows in a data frame}
\begin{itemize}
\item One disadvantage of keeping data in the long format is
  redundancy and the possibility of inconsistency.
\item In the first set of exercises you are asked to create a data
  frame \code{classroom} from a csv file available on the Internet.
  Each of the \Sexpr{nrow(classroom)} rows corresponds to a student
  in a classroom in a school.  There is one numeric ``school level''
  covariate, \code{housepov}.
\item To check if \code{housepov} is stored consistently we select
  the unique combinations of only those two columns
\end{itemize}
<<clasuniq>>=
str(unique(subset(classroom, select = c(schoolid,housepov))))
@ 
  Because there are 107 unique combinations and 107 schools,
  \code{housepov} is consistent with \code{schoolid}.
\end{frame}
\begin{frame}
  \frametitle{Summary}
  \begin{itemize}
  \item Most common data organization is as a \Emph{data.frame}, which
    is a rectangular table.  Columns can be numeric, factors, ordered
    factors, dates, date/time values, etc.
  \item Data can be read from ``flat files'' either locally or over
    the web.  Variables are accessed or modified using the \code{\$}
    operator or functions \code{with()} and \code{within()}.
  \item The \code{str()}, \code{summary()} and \code{subset()}
    functions are versatile and worth learning.
  \item For longitudinal and other data, prefer the ``long'' format to
    the ``wide'' format.
  \end{itemize}
\end{frame}

<<<cleanup,echo=FALSE,results=hide>>=
rm(classroom, sprayA, sprayDEF, sprays)
@ 

\end{document}
